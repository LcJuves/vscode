# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CodeOSS CI

on:
  push:
    branches:
      - dev/*
    tags:
      - v*.*.*
  pull_request:
    branches:
      - $default-branch

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_VERSION: 14
  PYTHON_VERSION: "2.x"
  CODE_ICO_URL: https://github.com/LiangchengJ/vscode/raw/94cba4eb314f52fd18b47b72459954fda65302d0/resources/win32/code.ico
  ENABLE_TERRAPIN: true
  VSCODE_STEP_ON_IT: false
  CACHE_VERSION: 1648273595

jobs:
  generate-product-configurations:
    name: Generate product configurations
    runs-on: windows-latest
    outputs:
      product-json: ${{ steps.product.outputs.product-json }}
      win32vem-xml: ${{ steps.product.outputs.win32vem-xml }}
      version: ${{ steps.product.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - id: product
        name: Do generating ...
        run: |
          GITHUB_API_URL=https://api.github.com/repos/microsoft/vscode/releases
          curl -H "Accept: application/vnd.github.v3+json" -s $GITHUB_API_URL >releases.json
          # shellcheck disable=SC2034
          REMOTE_VERSION=$(node -p "require('./releases.json')[0]['tag_name']")
          VERSION=$(node -p "require('./package.json')['version']")

          UNIVERSAL_ZIP_VERSION=$VERSION
          VS_ZIP_URL="https://update.code.visualstudio.com/${UNIVERSAL_ZIP_VERSION}/darwin-universal/stable"
          CURL_DO_URL=$(curl -is "$VS_ZIP_URL" | grep Location | awk -F ": " '{print $2}' | tr -d "\r|\n")
          echo "CURL_DO_URL >>> $CURL_DO_URL"

          VS_ZIP_NAME=VSCode-darwin-universal.zip
          curl -L -s -o $VS_ZIP_NAME "$CURL_DO_URL"
          npm install extract-zip@2.0.1 -g
          extract-zip $VS_ZIP_NAME
          cp 'Visual Studio Code.app/Contents/Resources/app/product.json' ./vs-product.json
          node ./.github/updateProduct.js
          echo "::set-output name=product-json::$(cat product.json)"

          node ./.github/updateWin32VisualElementsManifest.js
          echo "::set-output name=win32vem-xml::$(cat resources/win32/VisualElementsManifest.xml)"

          echo "::set-output name=version::$VERSION"
        shell: bash

  compile:
    name: Compile
    runs-on: ubuntu-latest
    env:
      VSCODE_ARCH: x64

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install build tools
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: |
          sudo apt update -y
          sudo apt install -y build-essential pkg-config libx11-dev libx11-xcb-dev libxkbfile-dev libsecret-1-dev libnotify-bin
        shell: bash

      - name: Compute node modules cache key
        id: compute-node-modules-cache-key
        run: |
          K=$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $ENABLE_TERRAPIN $CACHE_VERSION)
          echo "::set-output name=key::$K"
        shell: bash

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: "${{ runner.os }}GenericNodeModules${{ steps.compute-node-modules-cache-key.outputs.key }}"

      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: yarn --frozen-lockfile --network-timeout 180000
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        shell: bash

      - name: Compile & Hygiene
        run: yarn npm-run-all -lp core-ci extensions-ci hygiene eslint valid-layers-check
        shell: bash

      - name: Compile test suites
        if: ${{ env.VSCODE_STEP_ON_IT == 'false' }}
        run: |
          yarn --cwd test/smoke compile
          yarn --cwd test/integration/browser compile
        shell: bash

      - name: Compress compilation artifact
        run: tar -cvJ --ignore-failed-read -f compilation.tar.xz .build out-* test/integration/browser/out test/smoke/out test/automation/out
        shell: bash

      - name: Publish compilation artifact
        uses: actions/upload-artifact@v3
        with:
          name: Compilation
          path: compilation.tar.xz

  linux:
    name: Linux
    runs-on: ubuntu-latest
    needs: [generate-product-configurations, compile]
    strategy:
      matrix:
        arch: [x64, arm64, armhf]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Update product configurations
        run: |
          echo '${{ needs.generate-product-configurations.outputs.product-json }}' >product.json
          NPM_ARCH=${{ matrix.arch }}
          [ "${NPM_ARCH}" == "armhf" ] && NPM_ARCH=armv7l
          echo "NPM_ARCH=$NPM_ARCH" >>"$GITHUB_ENV"
          echo "VSCODE_ARCH=${{ matrix.arch }}" >>"$GITHUB_ENV"
          VSCODE_QUALITY=$(node -p "require('./product.json')['quality']||''")
          echo "VSCODE_QUALITY=$VSCODE_QUALITY" >>"$GITHUB_ENV"
          APPLICATION_NAME=$(node -p "require('./product.json')['applicationName']")
          echo "APPLICATION_NAME=$APPLICATION_NAME" >>"$GITHUB_ENV"
        shell: bash

      - name: Setup system services
        if: ${{ env.VSCODE_ARCH == 'x64' }}
        run: |
          # Start X server
          sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
          sudo chmod +x /etc/init.d/xvfb
          sudo update-rc.d xvfb defaults
          sudo service xvfb start
          # Start dbus session
          DBUS_LAUNCH_RESULT=$(sudo dbus-daemon --config-file=/usr/share/dbus-1/system.conf --print-address)
          echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_LAUNCH_RESULT" >>"$GITHUB_ENV"
        shell: bash

      - name: Download compilation output
        uses: actions/download-artifact@v3
        with:
          name: Compilation

      - name: Extract compilation output
        run: tar -xJf compilation.tar.xz
        shell: bash

      - name: Compute node modules cache key
        id: compute-node-modules-cache-key
        run: |
          K=$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $ENABLE_TERRAPIN $CACHE_VERSION)
          echo "::set-output name=key::$K"
        shell: bash

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: "${{ runner.os }}NodeModules${{ steps.compute-node-modules-cache-key.outputs.key }}"

      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: |
          npm_config_arch=${NPM_ARCH}
          export npm_config_arch

          for i in {1..3}; do
          	yarn --frozen-lockfile && break
          	if [ "$i" -eq 3 ]; then
          		echo "Yarn failed too many times" >&2
          		exit 1
          	fi
          	echo "Yarn failed $i, trying again..."
          done
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        shell: bash

      - name: Build binary packages
        id: build-binary-packages
        run: |
          BUILD_VERSION="$(date +%s)"
          echo "BUILD_VERSION=$BUILD_VERSION" >>"$GITHUB_ENV"

          [ -z "${VSCODE_QUALITY}" ] &&
          	XZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_ARCH}-$BUILD_VERSION.tar.xz" ||
          	XZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_QUALITY}-${VSCODE_ARCH}-$BUILD_VERSION.tar.xz"
          echo "XZ_TARBALL_NAME=$XZ_TARBALL_NAME" >>"$GITHUB_ENV"
          [ -z "${VSCODE_QUALITY}" ] &&
          	GZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_ARCH}-$BUILD_VERSION.tar.gz" ||
          	GZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_QUALITY}-${VSCODE_ARCH}-$BUILD_VERSION.tar.gz"
          echo "GZ_TARBALL_NAME=$GZ_TARBALL_NAME" >>"$GITHUB_ENV"

          yarn gulp vscode-linux-${VSCODE_ARCH}-min-ci
          (cd .. && cp -r VSCode-linux-${VSCODE_ARCH} CodeOSS-linux-${VSCODE_ARCH})
          (cd .. && tar -cJf "$XZ_TARBALL_NAME" CodeOSS-linux-${VSCODE_ARCH})
          mv ../"$XZ_TARBALL_NAME" .
          (cd .. && tar -zcf "$GZ_TARBALL_NAME" CodeOSS-linux-${VSCODE_ARCH})
          mv ../"$GZ_TARBALL_NAME" .

          echo "::group::Build rpm package"
          yarn gulp vscode-linux-${VSCODE_ARCH}-build-rpm
          case $VSCODE_ARCH in
          x64) RPM_ARCH="x86_64" ;;
          armhf) RPM_ARCH="armv7hl" ;;
          arm64) RPM_ARCH="aarch64" ;;
          *) RPM_ARCH="$VSCODE_ARCH" ;;
          esac
          RPM_OUT_DIR=.build/linux/rpm/$RPM_ARCH
          RPM_FILENAME="$(cd $RPM_OUT_DIR && (ls ./*.rpm) | awk -F "./" 'NR==1{print $2}')"
          mv "$RPM_OUT_DIR/$RPM_FILENAME" .
          echo "RPM_FILENAME=$RPM_FILENAME" >>"$GITHUB_ENV"
          echo "::endgroup::"

          echo "::group::Build deb package"
          yarn gulp vscode-linux-${VSCODE_ARCH}-build-deb
          case $VSCODE_ARCH in
          x64) DEB_ARCH="amd64" ;;
          *) DEB_ARCH="$VSCODE_ARCH" ;;
          esac
          DEB_OUT_DIR=.build/linux/deb/$DEB_ARCH/deb
          DEB_FILENAME="$(cd $DEB_OUT_DIR && (ls ./*.deb) | awk -F "./" 'NR==1{print $2}')"
          mv "$DEB_OUT_DIR/$DEB_FILENAME" .
          echo "DEB_FILENAME=$DEB_FILENAME" >>"$GITHUB_ENV"
          echo "::endgroup::"
        shell: bash

      - name: Prepare snap package
        run: |
          yarn gulp vscode-linux-$VSCODE_ARCH-prepare-snap
          SNAP_FILENAME="$APPLICATION_NAME-$VSCODE_QUALITY-$VSCODE_ARCH-$BUILD_VERSION.snap"
          echo "SNAP_FILENAME=$SNAP_FILENAME" >>"$GITHUB_ENV"
        shell: bash

      - name: Build snap package
        uses: addnab/docker-run-action@v3
        with:
          image: "snapcore/snapcraft:stable"
          options: "-v ${{ github.workspace }}:/workspace \
            -e VSCODE_ARCH=${{ env.VSCODE_ARCH }} \
            -e APPLICATION_NAME=${{ env.APPLICATION_NAME }} \
            -e SNAP_FILENAME=${{ env.SNAP_FILENAME }}"
          run: |
            set -x
            cd /workspace || exit
            # Get snapcraft version
            snapcraft --version
            # Make sure we get latest packages
            sudo apt-get update
            sudo apt-get upgrade -y
            sudo apt-get install -y curl apt-transport-https ca-certificates
            # Yarn
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update
            sudo apt-get install -y yarn
            # Install build dependencies
            (cd build && yarn)
            SNAP_ROOT="$PWD/.build/linux/snap/${VSCODE_ARCH}"
            SNAP_PATH="$SNAP_ROOT/$SNAP_FILENAME"
            case $VSCODE_ARCH in
            x64) SNAPCRAFT_TARGET_ARGS="" ;;
            *) SNAPCRAFT_TARGET_ARGS="--target-arch $VSCODE_ARCH" ;;
            esac
            (cd "$SNAP_ROOT/$APPLICATION_NAME-$VSCODE_ARCH" &&
            	sudo --preserve-env snapcraft prime $SNAPCRAFT_TARGET_ARGS &&
            	snap pack prime --compression=lzo --filename="$SNAP_PATH")
            mv "$SNAP_PATH" .
          shell: bash
          registry: docker.io

      - name: Build AppImage package
        if: ${{ env.VSCODE_ARCH == 'x64' }}
        run: |
          echo "::group::Install deno"
          curl -fsSL https://deno.land/x/install/install.sh | sh
          DENO_INSTALL="$HOME/.deno"
          export DENO_INSTALL
          PATH="$DENO_INSTALL/bin:$PATH"
          export PATH
          echo "::endgroup::"

          echo "::group::Start deno file server"
          deno run --allow-read --allow-net https://deno.land/std@0.131.0/http/file_server.ts >dfserv.log 2>&1 &
          sleep 20 && (netstat -tlnp | grep 4507) && cat dfserv.log
          echo "::endgroup::"

          DOWNLOAD_URL="http://127.0.0.1:4507/$DEB_FILENAME"
          echo "DOWNLOAD_URL >>> $DOWNLOAD_URL" && export DOWNLOAD_URL
          echo "APPLICATION_NAME >>> $APPLICATION_NAME" && export APPLICATION_NAME
          LINUX_ICON_NAME=$(node -p "require('./product.json')['linuxIconName']")
          echo "LINUX_ICON_NAME >>> $LINUX_ICON_NAME" && export LINUX_ICON_NAME

          echo "::group::Downloading pkg2appimage tool"
          GITHUB_API_URL=https://api.github.com/repos/AppImage/pkg2appimage/releases
          curl -H "Accept: application/vnd.github.v3+json" -s $GITHUB_API_URL >releases.json
          BROWSER_DOWNLOAD_URL=$(node -p "require('./releases.json')[0]['assets'][0]['browser_download_url']")
          curl -L -O -s "$BROWSER_DOWNLOAD_URL"
          echo "::endgroup::"

          echo "::group::Building AppImage"
          chmod u+x ./"${BROWSER_DOWNLOAD_URL##*/}" && ./"${BROWSER_DOWNLOAD_URL##*/}" .github/CodeOSS-AppImage.yml
          APPIMAGE_FILENAME=CodeOSS-linux-${VSCODE_ARCH}-${{ needs.generate-product-configurations.outputs.version }}.AppImage
          mv out/*.AppImage $APPIMAGE_FILENAME
          echo "APPIMAGE_FILENAME=$APPIMAGE_FILENAME" >>"$GITHUB_ENV"
          echo "::endgroup::"
        shell: bash

      - name: Build server packages
        run: |
          yarn gulp vscode-reh-linux-${VSCODE_ARCH}-min-ci
          SERVER_BUILD_NAME="vscode-server-linux-${VSCODE_ARCH}"
          SERVER_TARBALL_FILENAME="$SERVER_BUILD_NAME.tar.gz"
          (cd .. && cp -rf vscode-reh-linux-${VSCODE_ARCH} $SERVER_BUILD_NAME)
          (cd .. && tar -zcf $SERVER_TARBALL_FILENAME $SERVER_BUILD_NAME)
          mv ../$SERVER_TARBALL_FILENAME .
          echo "SERVER_TARBALL_FILENAME=$SERVER_TARBALL_FILENAME" >>"$GITHUB_ENV"

          yarn gulp vscode-reh-web-linux-${VSCODE_ARCH}-min-ci
          SERVER_WEB_BUILD_NAME="vscode-server-linux-${VSCODE_ARCH}-web"
          SERVER_WEB_TARBALL_FILENAME="$SERVER_WEB_BUILD_NAME.tar.gz"
          (cd .. && cp -rf vscode-reh-web-linux-${VSCODE_ARCH} $SERVER_WEB_BUILD_NAME)
          (cd .. && tar -zcf $SERVER_WEB_TARBALL_FILENAME $SERVER_WEB_BUILD_NAME)
          mv ../$SERVER_WEB_TARBALL_FILENAME .
          echo "SERVER_WEB_TARBALL_FILENAME=$SERVER_WEB_TARBALL_FILENAME" >>"$GITHUB_ENV"
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          gensha512() { (sha512sum "$1" | awk '{print $1}' >"$1".sha512); }
          [ -f "$XZ_TARBALL_NAME" ] && gensha512 "$XZ_TARBALL_NAME"
          [ -f "$GZ_TARBALL_NAME" ] && gensha512 "$GZ_TARBALL_NAME"
          [ -f "$SERVER_TARBALL_FILENAME" ] && gensha512 "$SERVER_TARBALL_FILENAME"
          [ -f "$SERVER_WEB_TARBALL_FILENAME" ] && gensha512 "$SERVER_WEB_TARBALL_FILENAME"
          [ -f "$RPM_FILENAME" ] && gensha512 "$RPM_FILENAME"
          [ -f "$DEB_FILENAME" ] && gensha512 "$DEB_FILENAME"
          [ -f "$SNAP_FILENAME" ] && gensha512 "$SNAP_FILENAME"
          [ -f "$APPIMAGE_FILENAME" ] && gensha512 "$APPIMAGE_FILENAME"
          [ "$VSCODE_ARCH" != "x64" ] && rm -f product.json
          [ -f product.json ] && deno fmt product.json 1>/dev/null
          ([ -f product.json ] && gensha512 product.json) || echo >/dev/null
        shell: bash

      - name: Publish packages
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            ${{ env.XZ_TARBALL_NAME }}
            ${{ env.XZ_TARBALL_NAME }}.sha512
            ${{ env.GZ_TARBALL_NAME }}
            ${{ env.GZ_TARBALL_NAME }}.sha512
            ${{ env.RPM_FILENAME }}
            ${{ env.RPM_FILENAME }}.sha512
            ${{ env.DEB_FILENAME }}
            ${{ env.DEB_FILENAME }}.sha512
            ${{ env.SNAP_FILENAME }}
            ${{ env.SNAP_FILENAME }}.sha512
            ${{ env.APPIMAGE_FILENAME }}
            ${{ env.APPIMAGE_FILENAME }}.sha512
            ${{ env.SERVER_TARBALL_FILENAME }}
            ${{ env.SERVER_TARBALL_FILENAME }}.sha512
            ${{ env.SERVER_WEB_TARBALL_FILENAME }}
            ${{ env.SERVER_WEB_TARBALL_FILENAME }}.sha512
            product.json
            product.json.sha512

  macos:
    name: macOS
    runs-on: macos-latest
    needs: generate-product-configurations
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Update product configurations
        run: echo '${{ needs.generate-product-configurations.outputs.product-json }}' >product.json
        shell: bash

      - name: Build and Package
        run: |
          npm_config_arch=${{ matrix.arch }}
          export npm_config_arch
          yarn
          yarn gulp vscode-darwin-${{ matrix.arch }}-min
          (cd .. && cp -r VSCode-darwin-${{ matrix.arch }} CodeOSS-darwin-${{ matrix.arch }})
          (cd .. && tar -cJf CodeOSS-darwin-${{ matrix.arch }}.tar.xz CodeOSS-darwin-${{ matrix.arch }})
          mv ../CodeOSS-darwin-${{ matrix.arch }}.tar.xz .

          npm i -g @ffflorian/jszip-cli@3.1.6
          (cd .. && jszip-cli add CodeOSS-darwin-${{ matrix.arch }} --output CodeOSS-darwin-${{ matrix.arch }}.zip)
          mv ../CodeOSS-darwin-${{ matrix.arch }}.zip .

          if [ "${{ matrix.arch }}" == "x64" ]; then
          	yarn gulp vscode-reh-darwin-min
          	(cd .. && mv vscode-reh-darwin vscode-server-darwin)
          	(cd .. && jszip-cli add vscode-server-darwin --output vscode-server-darwin.zip)
          	mv ../vscode-server-darwin.zip .

          	yarn gulp vscode-reh-web-darwin-min
          	(cd .. && mv vscode-reh-web-darwin vscode-server-darwin-web)
          	(cd .. && jszip-cli add vscode-server-darwin-web --output vscode-server-darwin-web.zip)
          	mv ../vscode-server-darwin-web.zip .
          fi
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          npm install -g checksum
          checksum -a sha512 CodeOSS-darwin-${{ matrix.arch }}.tar.xz | awk '{print $1}' >CodeOSS-darwin-${{ matrix.arch }}.tar.xz.sha512
          checksum -a sha512 CodeOSS-darwin-${{ matrix.arch }}.zip | awk '{print $1}' >CodeOSS-darwin-${{ matrix.arch }}.zip.sha512

          if [ -f "vscode-server-darwin.zip" ]; then
          	checksum -a sha512 vscode-server-darwin.zip | awk '{print $1}' >vscode-server-darwin.zip.sha512
          fi

          if [ -f "vscode-server-darwin-web.zip" ]; then
          	checksum -a sha512 vscode-server-darwin-web.zip | awk '{print $1}' >vscode-server-darwin-web.zip.sha512
          fi
        shell: bash

      - name: Publish packages
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            CodeOSS-darwin-${{ matrix.arch }}.tar.xz
            CodeOSS-darwin-${{ matrix.arch }}.tar.xz.sha512
            CodeOSS-darwin-${{ matrix.arch }}.zip
            CodeOSS-darwin-${{ matrix.arch }}.zip.sha512
            vscode-server-darwin.zip
            vscode-server-darwin.zip.sha512
            vscode-server-darwin-web.zip
            vscode-server-darwin-web.zip.sha512

  windows:
    name: Windows
    runs-on: windows-2019
    needs: generate-product-configurations
    strategy:
      matrix:
        arch: [x64, arm64, ia32]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Update product configurations
        run: |
          echo '${{ needs.generate-product-configurations.outputs.product-json }}' >product.json
          echo '${{ needs.generate-product-configurations.outputs.win32vem-xml }}' >resources/win32/VisualElementsManifest.xml
        shell: bash

      - name: Build binary packages
        run: |
          npm_config_arch=${{ matrix.arch }}
          export npm_config_arch
          yarn
          yarn gulp vscode-win32-${{ matrix.arch }}-min
          (cd .. && cp -r VSCode-win32-${{ matrix.arch }} CodeOSS-win32-${{ matrix.arch }})
          (cd .. && tar -cJf CodeOSS-win32-${{ matrix.arch }}.tar.xz CodeOSS-win32-${{ matrix.arch }})
          mv ../CodeOSS-win32-${{ matrix.arch }}.tar.xz .

          (cd .. && 7z a CodeOSS-win32-${{ matrix.arch }}.zip CodeOSS-win32-${{ matrix.arch }} -r -mx9)
          mv ../CodeOSS-win32-${{ matrix.arch }}.zip .
        shell: bash

      - name: Build setup installers
        run: |
          yarn gulp vscode-win32-${{ matrix.arch }}-inno-updater
          curl -L -s -o resources/win32/code.ico ${{ env.CODE_ICO_URL }}

          yarn gulp vscode-win32-${{ matrix.arch }}-user-setup
          mv .build/win32-${{ matrix.arch }}/user-setup/VSCodeSetup.exe CodeOSSUserSetup-win32-${{ matrix.arch }}.exe

          yarn gulp vscode-win32-${{ matrix.arch }}-system-setup
          mv .build/win32-${{ matrix.arch }}/system-setup/VSCodeSetup.exe CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe
        shell: bash

      - name: Build server packages
        if: ${{ matrix.arch != 'arm64' }}
        run: |
          yarn gulp vscode-reh-win32-${{ matrix.arch }}-min
          (cd .. && mv vscode-reh-win32-${{ matrix.arch }} vscode-server-win32-${{ matrix.arch }})
          (cd .. && 7z a vscode-server-win32-${{ matrix.arch }}.zip vscode-server-win32-${{ matrix.arch }} -r -mx9)
          mv ../vscode-server-win32-${{ matrix.arch }}.zip .

          yarn gulp vscode-reh-web-win32-${{ matrix.arch }}-min
          (cd .. && mv vscode-reh-web-win32-${{ matrix.arch }} vscode-server-win32-${{ matrix.arch }}-web)
          (cd .. && 7z a vscode-server-win32-${{ matrix.arch }}-web.zip vscode-server-win32-${{ matrix.arch }}-web -r -mx9)
          mv ../vscode-server-win32-${{ matrix.arch }}-web.zip .
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          sha512sum CodeOSS-win32-${{ matrix.arch }}.tar.xz | awk '{print $1}' >CodeOSS-win32-${{ matrix.arch }}.tar.xz.sha512
          sha512sum CodeOSS-win32-${{ matrix.arch }}.zip | awk '{print $1}' >CodeOSS-win32-${{ matrix.arch }}.zip.sha512
          sha512sum CodeOSSUserSetup-win32-${{ matrix.arch }}.exe | awk '{print $1}' >CodeOSSUserSetup-win32-${{ matrix.arch }}.exe.sha512
          sha512sum CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe | awk '{print $1}' >CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe.sha512
          if [ -f "vscode-server-win32-${{ matrix.arch }}.zip" ]; then
          	sha512sum vscode-server-win32-${{ matrix.arch }}.zip | awk '{print $1}' >vscode-server-win32-${{ matrix.arch }}.zip.sha512
          fi

          if [ -f "vscode-server-win32-${{ matrix.arch }}-web.zip" ]; then
          	sha512sum vscode-server-win32-${{ matrix.arch }}-web.zip | awk '{print $1}' >vscode-server-win32-${{ matrix.arch }}-web.zip.sha512
          fi
        shell: bash

      - name: Publish packages
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            CodeOSS-win32-${{ matrix.arch }}.tar.xz
            CodeOSS-win32-${{ matrix.arch }}.tar.xz.sha512
            CodeOSS-win32-${{ matrix.arch }}.zip
            CodeOSS-win32-${{ matrix.arch }}.zip.sha512
            CodeOSSUserSetup-win32-${{ matrix.arch }}.exe
            CodeOSSUserSetup-win32-${{ matrix.arch }}.exe.sha512
            CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe
            CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe.sha512
            vscode-server-win32-${{ matrix.arch }}.zip
            vscode-server-win32-${{ matrix.arch }}.zip.sha512
            vscode-server-win32-${{ matrix.arch }}-web.zip
            vscode-server-win32-${{ matrix.arch }}-web.zip.sha512
