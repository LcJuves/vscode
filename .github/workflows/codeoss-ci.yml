# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CodeOSS CI

on:
  push:
    branches:
      - dev/*
    tags:
      - v*.*.*
  pull_request:
    branches:
      - $default-branch

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_VERSION: 14
  PYTHON_VERSION: "2.x"
  CODE_ICO_URL: https://github.com/LiangchengJ/vscode/raw/94cba4eb314f52fd18b47b72459954fda65302d0/resources/win32/code.ico
  VSCODE_STEP_ON_IT: false
  CACHE_VERSION: 1648396992

jobs:
  generate-product-configurations:
    name: Generate product configurations
    runs-on: windows-latest
    outputs:
      product-json: ${{ steps.write-outputs.outputs.product-json }}
      win32vem-xml: ${{ steps.write-outputs.outputs.win32vem-xml }}
      application-name: ${{ steps.write-outputs.outputs.application-name }}
      vscode-quality: ${{ steps.write-outputs.outputs.vscode-quality }}
      version: ${{ steps.write-outputs.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Compute product configurations cache key
        id: compute-product-configurations-cache-key
        run: |
          GITHUB_API_URL=https://api.github.com/repos/microsoft/vscode/releases
          curl -H "Accept: application/vnd.github.v3+json" -s $GITHUB_API_URL >releases.json
          # shellcheck disable=SC2034
          REMOTE_VERSION=$(node -p "require('./releases.json')[0]['tag_name']")
          VERSION=$(node -p "require('./package.json')['version']")
          echo "VERSION=$VERSION" >>"$GITHUB_ENV"

          UNIVERSAL_ZIP_VERSION=$VERSION
          VS_ZIP_URL="https://update.code.visualstudio.com/${UNIVERSAL_ZIP_VERSION}/darwin-universal/stable"
          CURL_DO_URL=$(curl -is "$VS_ZIP_URL" | grep Location | awk -F ": " '{print $2}' | tr -d "\r|\n")
          echo "CURL_DO_URL=$CURL_DO_URL" >>"$GITHUB_ENV"
          echo "::set-output name=key::$(echo "$CURL_DO_URL#$CACHE_VERSION" | sha512sum | awk '{print $1}')"
        shell: bash

      - name: Cache product configurations
        id: cache-product-configurations
        uses: actions/cache@v2
        with:
          path: |
            product.json
            resources/win32/VisualElementsManifest.xml
          key: "${{ runner.os }}${{ steps.compute-product-configurations-cache-key.outputs.key }}"

      - name: Do generating ...
        if: ${{ steps.cache-product-configurations.outputs.cache-hit != 'true' }}
        run: |
          VS_ZIP_NAME=VSCode-darwin-universal.zip
          curl -L -s -o $VS_ZIP_NAME "$CURL_DO_URL"
          npm install extract-zip@2.0.1 -g
          extract-zip $VS_ZIP_NAME
          cp 'Visual Studio Code.app/Contents/Resources/app/product.json' ./vs-product.json
          node ./.github/updateProduct.js
          node ./.github/updateWin32VisualElementsManifest.js
        shell: bash

      - name: Write outputs
        id: write-outputs
        run: |
          echo "::set-output name=product-json::$(cat product.json)"
          echo "::set-output name=win32vem-xml::$(cat resources/win32/VisualElementsManifest.xml)"
          echo "::set-output name=application-name::$(node -p "require('./product.json')['applicationName']")"
          echo "::set-output name=vscode-quality::$(node -p "require('./product.json')['quality']||''")"
          echo "::set-output name=version::$VERSION"
        shell: bash

  compile:
    name: Compile
    runs-on: ubuntu-latest
    env:
      VSCODE_ARCH: x64

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install build tools
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: |
          sudo apt update -y
          sudo apt install -y build-essential pkg-config libx11-dev libx11-xcb-dev libxkbfile-dev libsecret-1-dev libnotify-bin
        shell: bash

      - name: Compute node modules cache key
        id: compute-node-modules-cache-key
        run: echo "::set-output name=key::$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $CACHE_VERSION)"
        shell: bash

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: "${{ runner.os }}GenericNodeModules${{ steps.compute-node-modules-cache-key.outputs.key }}"

      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: yarn --frozen-lockfile --network-timeout 180000
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        shell: bash

      - name: Compile & Hygiene
        run: yarn npm-run-all -lp core-ci extensions-ci hygiene eslint valid-layers-check
        shell: bash

      - name: Compile test suites
        if: ${{ env.VSCODE_STEP_ON_IT == 'false' }}
        run: |
          yarn --cwd test/smoke compile
          yarn --cwd test/integration/browser compile
        shell: bash

      - name: Compress compilation artifact
        run: tar -cvJ --ignore-failed-read -f compilation.tar.xz .build out-* test/integration/browser/out test/smoke/out test/automation/out
        shell: bash

      - name: Publish compilation artifact
        uses: actions/upload-artifact@v3
        with:
          name: Compilation
          path: compilation.tar.xz

  build-for-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    needs: [generate-product-configurations, compile]
    strategy:
      matrix:
        arch: [x64, arm64, armhf]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Update product configurations
        run: |
          echo '${{ needs.generate-product-configurations.outputs.product-json }}' >product.json
          VSCODE_ARCH=${{ matrix.arch }}
          echo "VSCODE_ARCH=$VSCODE_ARCH" >>"$GITHUB_ENV"
          NPM_ARCH=$VSCODE_ARCH
          [ "${NPM_ARCH}" == "armhf" ] && NPM_ARCH=armv7l
          echo "NPM_ARCH=$NPM_ARCH" >>"$GITHUB_ENV"
          echo "APPLICATION_NAME=${{ needs.generate-product-configurations.outputs.application-name }}" >>"$GITHUB_ENV"
          echo "VSCODE_QUALITY=${{ needs.generate-product-configurations.outputs.vscode-quality }}" >>"$GITHUB_ENV"
          echo "VERSION=${{ needs.generate-product-configurations.outputs.version }}" >>"$GITHUB_ENV"
        shell: bash

      - name: Setup system services
        if: ${{ env.VSCODE_ARCH == 'x64' }}
        run: |
          # Start X server
          sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
          sudo chmod +x /etc/init.d/xvfb
          sudo update-rc.d xvfb defaults
          sudo service xvfb start
          # Start dbus session
          DBUS_LAUNCH_RESULT=$(sudo dbus-daemon --config-file=/usr/share/dbus-1/system.conf --print-address)
          echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_LAUNCH_RESULT" >>"$GITHUB_ENV"
        shell: bash

      - name: Download compilation output
        uses: actions/download-artifact@v3
        with:
          name: Compilation

      - name: Extract compilation output
        run: tar -xJf compilation.tar.xz
        shell: bash

      - name: Compute node modules cache key
        id: compute-node-modules-cache-key
        run: echo "::set-output name=key::$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $CACHE_VERSION)"
        shell: bash

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: "${{ runner.os }}NodeModules${{ steps.compute-node-modules-cache-key.outputs.key }}"

      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: |
          npm_config_arch=${NPM_ARCH}
          export npm_config_arch

          for i in {1..3}; do
          	yarn --frozen-lockfile && break
          	if [ "$i" -eq 3 ]; then
          		echo "Yarn failed too many times" >&2
          		exit 1
          	fi
          	echo "Yarn failed $i, trying again..."
          done
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        shell: bash

      - name: Build client artifacts
        run: |
          BUILD_VERSION="$(date +%s)"

          echo "::group::Build binary package"
          yarn gulp vscode-linux-${VSCODE_ARCH}-min-ci
          BUILD=CodeOSS-linux-${VSCODE_ARCH}
          (cd .. && cp -r VSCode-linux-${VSCODE_ARCH} $BUILD)
          [ -z "${VSCODE_QUALITY}" ] &&
          	XZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_ARCH}-$BUILD_VERSION.tar.xz" ||
          	XZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_QUALITY}-${VSCODE_ARCH}-$BUILD_VERSION.tar.xz"
          (cd .. && tar -cJf "$XZ_TARBALL_NAME" $BUILD)
          mv ../"$XZ_TARBALL_NAME" .
          echo "XZ_TARBALL_NAME=$XZ_TARBALL_NAME" >>"$GITHUB_ENV"
          [ -z "${VSCODE_QUALITY}" ] &&
          	GZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_ARCH}-$BUILD_VERSION.tar.gz" ||
          	GZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_QUALITY}-${VSCODE_ARCH}-$BUILD_VERSION.tar.gz"
          (cd .. && tar -zcf "$GZ_TARBALL_NAME" $BUILD)
          mv ../"$GZ_TARBALL_NAME" .
          echo "GZ_TARBALL_NAME=$GZ_TARBALL_NAME" >>"$GITHUB_ENV"
          echo "::endgroup::"

          echo "::group::Build rpm package"
          yarn gulp vscode-linux-${VSCODE_ARCH}-build-rpm
          case $VSCODE_ARCH in
          x64) RPM_ARCH="x86_64" ;;
          armhf) RPM_ARCH="armv7hl" ;;
          arm64) RPM_ARCH="aarch64" ;;
          *) RPM_ARCH="$VSCODE_ARCH" ;;
          esac
          RPM_OUT_DIR=.build/linux/rpm/$RPM_ARCH
          RPM_FILENAME="$(cd $RPM_OUT_DIR && (ls ./*.rpm) | awk -F "./" 'NR==1{print $2}')"
          mv "$RPM_OUT_DIR/$RPM_FILENAME" .
          echo "RPM_FILENAME=$RPM_FILENAME" >>"$GITHUB_ENV"
          echo "::endgroup::"

          echo "::group::Build deb package"
          yarn gulp vscode-linux-${VSCODE_ARCH}-build-deb
          case $VSCODE_ARCH in
          x64) DEB_ARCH="amd64" ;;
          *) DEB_ARCH="$VSCODE_ARCH" ;;
          esac
          DEB_OUT_DIR=.build/linux/deb/$DEB_ARCH/deb
          DEB_FILENAME="$(cd $DEB_OUT_DIR && (ls ./*.deb) | awk -F "./" 'NR==1{print $2}')"
          mv "$DEB_OUT_DIR/$DEB_FILENAME" .
          echo "DEB_FILENAME=$DEB_FILENAME" >>"$GITHUB_ENV"
          echo "::endgroup::"

          if [ "$VSCODE_ARCH" == "x64" ]; then
          	echo "::group::Build AppImage package"
          	npm install -g @liangchengj/nfserv && nfserv >nfserv.log 2>&1 &
          	sleep 3 && cat nfserv.log
          	DOWNLOAD_URL="http://127.0.0.1:9934/$DEB_FILENAME"
          	echo "DOWNLOAD_URL >>> $DOWNLOAD_URL" && export DOWNLOAD_URL
          	LINUX_ICON_NAME=$(node -p "require('./product.json')['linuxIconName']")
          	echo "LINUX_ICON_NAME >>> $LINUX_ICON_NAME" && export LINUX_ICON_NAME
          	GITHUB_API_URL=https://api.github.com/repos/AppImage/pkg2appimage/releases
          	curl -H "Accept: application/vnd.github.v3+json" -s $GITHUB_API_URL >releases.json
          	BROWSER_DOWNLOAD_URL=$(node -p "require('./releases.json')[0]['assets'][0]['browser_download_url']")
          	curl -L -O -s "$BROWSER_DOWNLOAD_URL" && chmod u+x "$PWD/${BROWSER_DOWNLOAD_URL##*/}"
          	"$PWD/${BROWSER_DOWNLOAD_URL##*/}" .github/CodeOSS-AppImage.yml
          	APPIMAGE_FILENAME=CodeOSS-linux-${VSCODE_ARCH}-$VERSION.AppImage
          	mv out/*.AppImage "$APPIMAGE_FILENAME"
          	echo "APPIMAGE_FILENAME=$APPIMAGE_FILENAME" >>"$GITHUB_ENV"
          	echo "::endgroup::"
          fi

          echo "::group::Build snap package"
          set -x
          yarn gulp vscode-linux-$VSCODE_ARCH-prepare-snap
          SNAP_FILENAME="$APPLICATION_NAME-$VSCODE_QUALITY-$VSCODE_ARCH-$BUILD_VERSION.snap"
          DOCKER_IMAGE_NAME="docker.io/snapcore/snapcraft:stable"
          SNAP_BUILD_SH_NAME="snap-build-$BUILD_VERSION.sh"
          cat <<'EOF' >"$PWD/$SNAP_BUILD_SH_NAME"
          cd /workspace || exit
          # Make sure we get latest packages
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y curl apt-transport-https ca-certificates
          # Get snapcraft version
          snapcraft --version
          SNAP_ROOT="$PWD/.build/linux/snap/${VSCODE_ARCH}"
          SNAP_PATH="$SNAP_ROOT/$SNAP_FILENAME"
          case $VSCODE_ARCH in
          x64) SNAP_ARCH="amd64" ;;
          *) SNAP_ARCH="$VSCODE_ARCH" ;;
          esac
          (cd "$SNAP_ROOT/$APPLICATION_NAME-$VSCODE_ARCH" &&
          	sudo --preserve-env snapcraft prime --target-arch "$SNAP_ARCH" &&
          	snap pack prime --compression=lzo --filename="$SNAP_PATH")
          mv "$SNAP_PATH" .
          EOF
          exec docker run -v "$PWD:/workspace" \
          	-e APPLICATION_NAME=$APPLICATION_NAME \
          	-e VSCODE_ARCH=$VSCODE_ARCH \
          	-e SNAP_FILENAME=$SNAP_FILENAME \
          	--entrypoint=bash $DOCKER_IMAGE_NAME -ex "/workspace/$SNAP_BUILD_SH_NAME"
          echo "::endgroup::"
        shell: bash

      - name: Build server artifacts
        run: |
          yarn gulp vscode-reh-linux-${VSCODE_ARCH}-min-ci
          SERVER_BUILD_NAME="vscode-server-linux-${VSCODE_ARCH}"
          SERVER_TARBALL_FILENAME="$SERVER_BUILD_NAME.tar.gz"
          (cd .. && cp -r vscode-reh-linux-${VSCODE_ARCH} $SERVER_BUILD_NAME)
          (cd .. && tar -zcf $SERVER_TARBALL_FILENAME $SERVER_BUILD_NAME)
          mv ../$SERVER_TARBALL_FILENAME .
          echo "SERVER_TARBALL_FILENAME=$SERVER_TARBALL_FILENAME" >>"$GITHUB_ENV"

          yarn gulp vscode-reh-web-linux-${VSCODE_ARCH}-min-ci
          SERVER_WEB_BUILD_NAME="vscode-server-linux-${VSCODE_ARCH}-web"
          SERVER_WEB_TARBALL_FILENAME="$SERVER_WEB_BUILD_NAME.tar.gz"
          (cd .. && cp -r vscode-reh-web-linux-${VSCODE_ARCH} $SERVER_WEB_BUILD_NAME)
          (cd .. && tar -zcf $SERVER_WEB_TARBALL_FILENAME $SERVER_WEB_BUILD_NAME)
          mv ../$SERVER_WEB_TARBALL_FILENAME .
          echo "SERVER_WEB_TARBALL_FILENAME=$SERVER_WEB_TARBALL_FILENAME" >>"$GITHUB_ENV"
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          gensha512() { (sha512sum "$1" | awk '{print $1}' >"$1".sha512); }
          [ -f "$XZ_TARBALL_NAME" ] && gensha512 "$XZ_TARBALL_NAME"
          [ -f "$GZ_TARBALL_NAME" ] && gensha512 "$GZ_TARBALL_NAME"
          [ -f "$SERVER_TARBALL_FILENAME" ] && gensha512 "$SERVER_TARBALL_FILENAME"
          [ -f "$SERVER_WEB_TARBALL_FILENAME" ] && gensha512 "$SERVER_WEB_TARBALL_FILENAME"
          [ -f "$RPM_FILENAME" ] && gensha512 "$RPM_FILENAME"
          [ -f "$DEB_FILENAME" ] && gensha512 "$DEB_FILENAME"
          [ -f "$SNAP_FILENAME" ] && gensha512 "$SNAP_FILENAME"
          [ -f "$APPIMAGE_FILENAME" ] && gensha512 "$APPIMAGE_FILENAME"
          [ "$VSCODE_ARCH" != "x64" ] && rm -f product.json
          ([ -f product.json ] && gensha512 product.json) || echo >/dev/null
        shell: bash

      - name: Publish artifacts
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            ${{ env.XZ_TARBALL_NAME }}
            ${{ env.XZ_TARBALL_NAME }}.sha512
            ${{ env.GZ_TARBALL_NAME }}
            ${{ env.GZ_TARBALL_NAME }}.sha512
            ${{ env.RPM_FILENAME }}
            ${{ env.RPM_FILENAME }}.sha512
            ${{ env.DEB_FILENAME }}
            ${{ env.DEB_FILENAME }}.sha512
            ${{ env.SNAP_FILENAME }}
            ${{ env.SNAP_FILENAME }}.sha512
            ${{ env.APPIMAGE_FILENAME }}
            ${{ env.APPIMAGE_FILENAME }}.sha512
            ${{ env.SERVER_TARBALL_FILENAME }}
            ${{ env.SERVER_TARBALL_FILENAME }}.sha512
            ${{ env.SERVER_WEB_TARBALL_FILENAME }}
            ${{ env.SERVER_WEB_TARBALL_FILENAME }}.sha512
            product.json
            product.json.sha512

  build-for-macos:
    name: Build for macOS
    runs-on: macos-latest
    needs: [generate-product-configurations, compile]
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Update product configurations
        run: |
          echo '${{ needs.generate-product-configurations.outputs.product-json }}' >product.json
          echo "VSCODE_ARCH=${{ matrix.arch }}" >>"$GITHUB_ENV"
          echo "APPLICATION_NAME=${{ needs.generate-product-configurations.outputs.application-name }}" >>"$GITHUB_ENV"
        shell: bash

      - name: Download compilation output
        uses: actions/download-artifact@v3
        with:
          name: Compilation

      - name: Extract compilation output
        run: tar -xJf compilation.tar.xz
        shell: bash

      - name: Compute node modules cache key
        id: compute-node-modules-cache-key
        run: echo "::set-output name=key::$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $CACHE_VERSION)"
        shell: bash

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: "${{ runner.os }}NodeModules${{ steps.compute-node-modules-cache-key.outputs.key }}"

      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: |
          npm install -g node-gyp@latest
          npm_config_arch=$VSCODE_ARCH
          export npm_config_arch
          npm_config_node_gyp=$(which node-gyp)
          export npm_config_node_gyp
          # Electron <= 13 does not ship with correct config.gypi headers,
          # remove this once we update to newer versions.
          # Refs https://github.com/nodejs/node-gyp/pull/2497
          export npm_config_force_process_config=true

          for i in {1..3}; do
          	yarn --frozen-lockfile && break
          	if [ "$i" -eq 3 ]; then
          		echo "Yarn failed too many times" >&2
          		exit 1
          	fi
          	echo "Yarn failed $i, trying again..."
          done
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        shell: bash

      - name: Build client artifacts
        run: |
          yarn gulp vscode-darwin-${VSCODE_ARCH}-min-ci
          BUILD=CodeOSS-darwin-${VSCODE_ARCH}
          (cd .. && cp -r VSCode-darwin-${VSCODE_ARCH} $BUILD)
          XZ_TARBALL_NAME=$BUILD.tar.xz
          (cd .. && tar -cJf $XZ_TARBALL_NAME $BUILD)
          mv ../$XZ_TARBALL_NAME .
          echo "XZ_TARBALL_NAME=$XZ_TARBALL_NAME" >>"$GITHUB_ENV"
          npm i -g @ffflorian/jszip-cli@3.1.6
          ZIP_NAME=$BUILD.zip
          (cd .. && jszip-cli add $BUILD --output $ZIP_NAME)
          mv ../$ZIP_NAME .
          echo "ZIP_NAME=$ZIP_NAME" >>"$GITHUB_ENV"
        shell: bash

      - name: Build server artifacts
        if: ${{ env.VSCODE_ARCH == 'x64' }}
        run: |
          yarn gulp vscode-reh-darwin-min-ci
          SERVER_BUILD_NAME="vscode-server-darwin"
          SERVER_ZIP_NAME="$SERVER_BUILD_NAME.zip"
          (cd .. && cp -r vscode-reh-darwin $SERVER_BUILD_NAME)
          (cd .. && 7z a $SERVER_ZIP_NAME $SERVER_BUILD_NAME -r -mx9)
          mv ../$SERVER_ZIP_NAME .
          echo "SERVER_ZIP_NAME=$SERVER_ZIP_NAME" >>"$GITHUB_ENV"

          yarn gulp vscode-reh-web-darwin-min-ci
          SERVER_WEB_BUILD_NAME="vscode-server-darwin-web"
          SERVER_WEB_ZIP_NAME="$SERVER_WEB_BUILD_NAME.zip"
          (cd .. && cp -r vscode-reh-web-darwin $SERVER_WEB_BUILD_NAME)
          (cd .. && 7z a $SERVER_WEB_ZIP_NAME $SERVER_WEB_BUILD_NAME -r -mx9)
          mv ../$SERVER_WEB_ZIP_NAME .
          echo "SERVER_WEB_ZIP_NAME=$SERVER_WEB_ZIP_NAME" >>"$GITHUB_ENV"
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          npm install -g checksum@1.0.0
          gensha512() { (checksum -a sha512 "$1" | awk '{print $1}' >"$1".sha512); }
          [ -f "$XZ_TARBALL_NAME" ] && gensha512 "$XZ_TARBALL_NAME"
          [ -f "$ZIP_NAME" ] && gensha512 "$ZIP_NAME"
          [ -f "$SERVER_ZIP_NAME" ] && gensha512 "$SERVER_ZIP_NAME"
          ([ -f "$SERVER_WEB_ZIP_NAME" ] && gensha512 "$SERVER_WEB_ZIP_NAME") || echo >/dev/null
        shell: bash

      - name: Publish artifacts
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            ${{ env.XZ_TARBALL_NAME }}
            ${{ env.XZ_TARBALL_NAME }}.sha512
            ${{ env.ZIP_NAME }}
            ${{ env.ZIP_NAME }}.sha512
            ${{ env.SERVER_ZIP_NAME }}
            ${{ env.SERVER_ZIP_NAME }}.sha512
            ${{ env.SERVER_WEB_ZIP_NAME }}
            ${{ env.SERVER_WEB_ZIP_NAME }}.sha512

  build-for-windows:
    name: Build for Windows
    runs-on: windows-2019
    needs: [generate-product-configurations, compile]
    strategy:
      matrix:
        arch: [x64, arm64, ia32]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Update product configurations
        run: |
          echo '${{ needs.generate-product-configurations.outputs.product-json }}' >product.json
          echo '${{ needs.generate-product-configurations.outputs.win32vem-xml }}' >resources/win32/VisualElementsManifest.xml
          echo "VSCODE_ARCH=${{ matrix.arch }}" >>"$GITHUB_ENV"
          echo "APPLICATION_NAME=${{ needs.generate-product-configurations.outputs.application-name }}" >>"$GITHUB_ENV"
          echo "VERSION=${{ needs.generate-product-configurations.outputs.version }}" >>"$GITHUB_ENV"
        shell: bash

      - name: Download compilation output
        uses: actions/download-artifact@v3
        with:
          name: Compilation

      - name: Extract compilation output
        run: tar -xJf compilation.tar.xz
        shell: bash

      - name: Compute node modules cache key
        id: compute-node-modules-cache-key
        run: echo "::set-output name=key::$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $CACHE_VERSION)"
        shell: bash

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: ".build/node_modules_cache"
          key: "${{ runner.os }}NodeModules${{ steps.compute-node-modules-cache-key.outputs.key }}"

      - name: Extract node modules archive
        if: ${{ steps.cache-node-modules.outputs.cache-hit == 'true' }}
        run: tar -xJf .build/node_modules_cache/cache.tar.xz
        shell: bash

      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: |
          npm_config_arch=${VSCODE_ARCH}
          export npm_config_arch

          for i in {1..3}; do
          	yarn --frozen-lockfile && break
          	if [ "$i" -eq 3 ]; then
          		echo "Yarn failed too many times" >&2
          		exit 1
          	fi
          	echo "Yarn failed $i, trying again..."
          done
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        shell: bash

      - name: Create node modules archive
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p .build/node_modules_cache
          node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
          tar -cJf .build/node_modules_cache/cache.tar.xz --files-from .build/node_modules_list.txt
        shell: bash

      - name: Build client artifacts
        run: |
          echo "::group::Build binary package"
          yarn gulp vscode-win32-${VSCODE_ARCH}-min-ci
          BUILD=CodeOSS-win32-${VSCODE_ARCH}
          (cd .. && cp -r VSCode-win32-${VSCODE_ARCH} $BUILD)
          XZ_TARBALL_NAME=$BUILD-$VERSION.tar.xz
          (cd .. && tar -cJf $XZ_TARBALL_NAME $BUILD)
          mv ../$XZ_TARBALL_NAME .
          echo "XZ_TARBALL_NAME=$XZ_TARBALL_NAME" >>"$GITHUB_ENV"
          ZIP_NAME=$BUILD-$VERSION.zip
          (cd .. && 7z a $ZIP_NAME $BUILD -r -mx9)
          mv ../$ZIP_NAME .
          echo "ZIP_NAME=$ZIP_NAME" >>"$GITHUB_ENV"
          echo "::endgroup::"

          yarn gulp vscode-win32-${VSCODE_ARCH}-inno-updater
          curl -L -s -o resources/win32/code.ico $CODE_ICO_URL

          echo "::group::Build system setup installer"
          yarn gulp vscode-win32-${VSCODE_ARCH}-system-setup
          SYSTEM_SETUP_NAME=CodeOSSSetup-${VSCODE_ARCH}-$VERSION.exe
          mv .build/win32-${VSCODE_ARCH}/system-setup/VSCodeSetup.exe $SYSTEM_SETUP_NAME
          echo "SYSTEM_SETUP_NAME=$SYSTEM_SETUP_NAME" >>"$GITHUB_ENV"
          echo "::endgroup::"

          echo "::group::Build user setup installer"
          yarn gulp vscode-win32-${VSCODE_ARCH}-user-setup
          USER_SETUP_NAME=CodeOSSUserSetup-${VSCODE_ARCH}-$VERSION.exe
          mv .build/win32-${VSCODE_ARCH}/user-setup/VSCodeSetup.exe $USER_SETUP_NAME
          echo "USER_SETUP_NAME=$USER_SETUP_NAME" >>"$GITHUB_ENV"
          echo "::endgroup::"
        shell: bash

      - name: Build server artifacts
        if: ${{ env.VSCODE_ARCH != 'arm64' }}
        run: |
          yarn gulp vscode-reh-win32-${VSCODE_ARCH}-min-ci
          SERVER_BUILD_NAME="vscode-server-win32-${VSCODE_ARCH}"
          SERVER_ZIP_NAME="$SERVER_BUILD_NAME.zip"
          (cd .. && cp -r vscode-reh-win32-${VSCODE_ARCH} $SERVER_BUILD_NAME)
          (cd .. && 7z a $SERVER_ZIP_NAME $SERVER_BUILD_NAME -r -mx9)
          mv ../$SERVER_ZIP_NAME .
          echo "SERVER_ZIP_NAME=$SERVER_ZIP_NAME" >>"$GITHUB_ENV"

          yarn gulp vscode-reh-web-win32-${VSCODE_ARCH}-min-ci
          SERVER_WEB_BUILD_NAME="vscode-server-win32-${VSCODE_ARCH}-web"
          SERVER_WEB_ZIP_NAME="$SERVER_WEB_BUILD_NAME.zip"
          (cd .. && cp -r vscode-reh-web-win32-${VSCODE_ARCH} $SERVER_WEB_BUILD_NAME)
          (cd .. && 7z a $SERVER_WEB_ZIP_NAME $SERVER_WEB_BUILD_NAME -r -mx9)
          mv ../$SERVER_WEB_ZIP_NAME .
          echo "SERVER_WEB_ZIP_NAME=$SERVER_WEB_ZIP_NAME" >>"$GITHUB_ENV"
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          gensha512() { (sha512sum "$1" | awk '{print $1}' >"$1".sha512); }
          [ -f "$XZ_TARBALL_NAME" ] && gensha512 "$XZ_TARBALL_NAME"
          [ -f "$ZIP_NAME" ] && gensha512 "$ZIP_NAME"
          [ -f "$SYSTEM_SETUP_NAME" ] && gensha512 "$SYSTEM_SETUP_NAME"
          [ -f "$USER_SETUP_NAME" ] && gensha512 "$USER_SETUP_NAME"
          [ -f "$SERVER_ZIP_NAME" ] && gensha512 "$SERVER_ZIP_NAME"
          ([ -f "$SERVER_WEB_ZIP_NAME" ] && gensha512 "$SERVER_WEB_ZIP_NAME") || echo >/dev/null
        shell: bash

      - name: Publish artifacts
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            ${{ env.XZ_TARBALL_NAME }}
            ${{ env.XZ_TARBALL_NAME }}.sha512
            ${{ env.ZIP_NAME }}
            ${{ env.ZIP_NAME }}.sha512
            ${{ env.SYSTEM_SETUP_NAME }}
            ${{ env.SYSTEM_SETUP_NAME }}.sha512
            ${{ env.USER_SETUP_NAME }}
            ${{ env.USER_SETUP_NAME }}.sha512
            ${{ env.SERVER_ZIP_NAME }}
            ${{ env.SERVER_ZIP_NAME }}.sha512
            ${{ env.SERVER_WEB_ZIP_NAME }}
            ${{ env.SERVER_WEB_ZIP_NAME }}.sha512
