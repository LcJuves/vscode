# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CodeOSS CI

on:
  push:
    branches:
      - dev/*
    tags:
      - v*.*.*
  pull_request:
    branches:
      - $default-branch

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_VERSION: 14
  PYTHON_VERSION: "2.x"
  SPLIT_LINE: =============================
  CODE_ICO_URL: https://raw.githubusercontent.com/LiangchengJ/vscode/94cba4eb314f52fd18b47b72459954fda65302d0/resources/win32/code.ico
  ENABLE_TERRAPIN: true
  VSCODE_STEP_ON_IT: false

jobs:
  generate-product-configurations:
    name: Generate product configurations
    runs-on: windows-latest
    outputs:
      product-json: ${{ steps.product.outputs.product-json }}
      win32vem-xml: ${{ steps.product.outputs.win32vem-xml }}
      version: ${{ steps.product.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - id: product
        name: Do generating ...
        run: |
          GITHUB_API_URL=https://api.github.com/repos/microsoft/vscode/releases
          curl -H "Accept: application/vnd.github.v3+json" -s $GITHUB_API_URL >releases.json
          # shellcheck disable=SC2034
          REMOTE_VERSION=$(node -p "require('./releases.json')[0]['tag_name']")
          VERSION=$(node -p "require('./package.json')['version']")

          UNIVERSAL_ZIP_VERSION=$VERSION
          VS_ZIP_URL="https://update.code.visualstudio.com/${UNIVERSAL_ZIP_VERSION}/darwin-universal/stable"
          CURL_DO_URL=$(curl -is "$VS_ZIP_URL" | grep Location | awk -F ": " '{print $2}' | tr -d "\r|\n")
          echo "CURL_DO_URL >>> $CURL_DO_URL"

          VS_ZIP_NAME=VSCode-darwin-universal.zip
          curl -L -s -o $VS_ZIP_NAME "$CURL_DO_URL"
          npm install extract-zip@2.0.1 -g
          extract-zip $VS_ZIP_NAME
          cp 'Visual Studio Code.app/Contents/Resources/app/product.json' ./vs-product.json
          node ./.github/updateProduct.js
          echo "::set-output name=product-json::$(cat product.json)"

          node ./.github/updateWin32VisualElementsManifest.js
          echo "::set-output name=win32vem-xml::$(cat resources/win32/VisualElementsManifest.xml)"

          echo "::set-output name=version::$VERSION"
        shell: bash

  compile:
    name: Compile
    runs-on: ubuntu-latest
    needs: generate-product-configurations

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Update product configurations
        run: |
          echo '${{ needs.generate-product-configurations.outputs.product-json }}' >product.json
          NPM_ARCH=${{ matrix.arch }}
          [ "${NPM_ARCH}" == "armhf" ] && NPM_ARCH=armv7l
          echo "NPM_ARCH=$NPM_ARCH" >>"$GITHUB_ENV"
          echo "VSCODE_ARCH=${{ matrix.arch }}" >>"$GITHUB_ENV"
          VSCODE_QUALITY=$(node -p "require('./product.json')['quality']||''")
          echo "VSCODE_QUALITY=$VSCODE_QUALITY" >>"$GITHUB_ENV"
          APPLICATION_NAME=$(node -p "require('./product.json')['applicationName']")
          echo "APPLICATION_NAME=$APPLICATION_NAME" >>"$GITHUB_ENV"
        shell: bash

      - name: Prepare yarn cache flags
        id: prepareYarnCacheFlags
        run: |
          mkdir -p .build
          node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $ENABLE_TERRAPIN >.build/yarnlockhash
          echo "::set-output name=yarnlockhash::$(cat .build/yarnlockhash)"
        shell: bash

      - name: Restore node_modules cache
        id: restoreNodeModulesCache
        uses: actions/cache@v2
        with:
          path: ".build/node_modules_cache"
          key: "${{ runner.os }}-genericNodeModules-${{ steps.prepareYarnCacheFlags.outputs.yarnlockhash }}"

      - name: Extract node_modules cache
        if: ${{ steps.restoreNodeModulesCache.outputs.cache-hit == 'true' }}
        run: |
          set -e
          tar -xzf .build/node_modules_cache/cache.tgz
        shell: bash

      - name: Switch to Terrapin packages
        if: ${{ steps.restoreNodeModulesCache.outputs.cache-hit != 'true' }} && ${{ env.ENABLE_TERRAPIN }}
        run: |
          set -e
          npx https://aka.ms/enablesecurefeed standAlone
        shell: bash

      - name: Install build tools
        if: ${{ steps.restoreNodeModulesCache.outputs.cache-hit != 'true' }}
        run: |
          set -e
          sudo apt update -y
          sudo apt install -y build-essential pkg-config libx11-dev libx11-xcb-dev libxkbfile-dev libsecret-1-dev libnotify-bin
        shell: bash

      - name: Install dependencies
        if: ${{ steps.restoreNodeModulesCache.outputs.cache-hit != 'true' }}
        run: |
          set -e
          for i in {1..3}; do # try 3 times, for Terrapin
          	yarn --frozen-lockfile && break
          	if [ "$i" -eq 3 ]; then
          		echo "Yarn failed too many times" >&2
          		exit 1
          	fi
          	echo "Yarn failed $i, trying again..."
          done
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        shell: bash

      - name: Create node_modules archive
        if: ${{ steps.restoreNodeModulesCache.outputs.cache-hit != 'true' }}
        run: |
          set -e
          node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
          mkdir -p .build/node_modules_cache
          tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt
        shell: bash

      # Mixin must run before optimize, because the CSS loader will inline small SVGs
      - name: Mix in quality
        run: |
          set -e
          node build/azure-pipelines/mixin
        shell: bash

      - name: Compile & Hygiene
        run: |
          set -e
          yarn npm-run-all -lp core-ci extensions-ci hygiene eslint valid-layers-check
        shell: bash

      - name: Compile test suites
        if: ${{ env.VSCODE_STEP_ON_IT == false }}
        run: |
          set -e
          yarn --cwd test/smoke compile
          yarn --cwd test/integration/browser compile
        shell: bash

      - name: Compress compilation artifact
        run: |
          set -e
          tar -cz --ignore-failed-read -f compilation.tar.gz .build out-* test/integration/browser/out test/smoke/out test/automation/out
        shell: bash

      - name: Publish compilation artifact
        uses: actions/upload-artifact@v3
        with:
          name: Compilation
          path: compilation.tar.gz

  linux:
    name: Linux
    runs-on: ubuntu-latest
    needs: [generate-product-configurations, compile]
    strategy:
      matrix:
        arch: [x64, arm64, armhf]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Update product configurations
        run: |
          echo '${{ needs.generate-product-configurations.outputs.product-json }}' >product.json
          NPM_ARCH=${{ matrix.arch }}
          [ "${NPM_ARCH}" == "armhf" ] && NPM_ARCH=armv7l
          echo "NPM_ARCH=$NPM_ARCH" >>"$GITHUB_ENV"
          echo "VSCODE_ARCH=${{ matrix.arch }}" >>"$GITHUB_ENV"
          VSCODE_QUALITY=$(node -p "require('./product.json')['quality']||''")
          echo "VSCODE_QUALITY=$VSCODE_QUALITY" >>"$GITHUB_ENV"
          APPLICATION_NAME=$(node -p "require('./product.json')['applicationName']")
          echo "APPLICATION_NAME=$APPLICATION_NAME" >>"$GITHUB_ENV"
        shell: bash

      - name: Install build tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential pkg-config libx11-dev libx11-xcb-dev libxkbfile-dev
          sudo apt-get install -y libgtk-3-0 libgbm1 libsecret-1-dev libnotify-bin libxss1 dbus
          sudo apt-get install -y fakeroot rpm
          sudo apt-get install -y snapcraft

      - name: Switch to Terrapin packages
        run: |
          set -e
          npx https://aka.ms/enablesecurefeed standAlone

      - name: Install build dependencies
        run: |
          set -e
          for i in {1..3}; do # try 3 times, for Terrapin
          	yarn --cwd build --frozen-lockfile && break
          	if [ "$i" -eq 3 ]; then
          		echo "Yarn failed too many times" >&2
          		exit 1
          	fi
          	echo "Yarn failed $i, trying again..."
          done
        shell: bash

      - name: Install dependencies
        run: |
          npm_config_arch=${NPM_ARCH}
          export npm_config_arch

          # if [ -z "$CC" ] || [ -z "$CXX" ]; then
          # 	# Download clang based on chromium revision used by vscode
          # 	curl -s https://raw.githubusercontent.com/chromium/chromium/91.0.4472.164/tools/clang/scripts/update.py | python - --output-dir="$PWD"/.build/CR_Clang --host-os=linux
          # 	# Download libcxx headers and objects from upstream electron releases
          # 	DEBUG=libcxx-fetcher \
          # 		VSCODE_LIBCXX_OBJECTS_DIR=$PWD/.build/libcxx-objects \
          # 		VSCODE_LIBCXX_HEADERS_DIR=$PWD/.build/libcxx_headers \
          # 		VSCODE_LIBCXXABI_HEADERS_DIR=$PWD/.build/libcxxabi_headers \
          # 		VSCODE_ARCH="${NPM_ARCH}" \
          # 		node build/linux/libcxx-fetcher.js
          # 	# Set compiler toolchain
          # 	# Flags for the client build are based on
          # 	# https://source.chromium.org/chromium/chromium/src/+/refs/tags/91.0.4472.164:build/config/arm.gni
          # 	# https://source.chromium.org/chromium/chromium/src/+/refs/tags/91.0.4472.164:build/config/compiler/BUILD.gn
          # 	# https://source.chromium.org/chromium/chromium/src/+/refs/tags/91.0.4472.164:build/config/c++/BUILD.gn
          # 	export CC=$PWD/.build/CR_Clang/bin/clang
          # 	export CXX=$PWD/.build/CR_Clang/bin/clang++
          # 	export CXXFLAGS="-nostdinc++ -D_LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS -D__NO_INLINE__ -isystem$PWD/.build/libcxx_headers/include -isystem$PWD/.build/libcxxabi_headers/include -fPIC -flto=thin -fsplit-lto-unit"
          # 	export LDFLAGS="-stdlib=libc++ -fuse-ld=lld -flto=thin -L$PWD/.build/libcxx-objects -lc++abi -Wl,--lto-O0"
          # 	VSCODE_REMOTE_CC=$(which gcc)
          # 	export VSCODE_REMOTE_CC
          # 	VSCODE_REMOTE_CXX=$(which g++)
          # 	export VSCODE_REMOTE_CXX
          # fi

          for i in {1..3}; do # try 3 times, for Terrapin
          	yarn --frozen-lockfile && break
          	if [ $i -eq 3 ]; then
          		echo "Yarn failed too many times" >&2
          		exit 1
          	fi
          	echo "Yarn failed $i, trying again..."
          done
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        shell: bash

      - name: Build binary packages
        id: build-binary-packages
        run: |
          BUILD_VERSION="$(date +%s)"

          [ -z "${VSCODE_QUALITY}" ] &&
          	XZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_ARCH}-$BUILD_VERSION.tar.xz" ||
          	XZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_QUALITY}-${VSCODE_ARCH}-$BUILD_VERSION.tar.xz"
          echo "XZ_TARBALL_NAME=$XZ_TARBALL_NAME" >>"$GITHUB_ENV"
          echo "::set-output name=xz-tarball-name::$XZ_TARBALL_NAME"
          [ -z "${VSCODE_QUALITY}" ] &&
          	GZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_ARCH}-$BUILD_VERSION.tar.gz" ||
          	GZ_TARBALL_NAME="${APPLICATION_NAME}-${VSCODE_QUALITY}-${VSCODE_ARCH}-$BUILD_VERSION.tar.gz"
          echo "GZ_TARBALL_NAME=$GZ_TARBALL_NAME" >>"$GITHUB_ENV"
          echo "::set-output name=gz-tarball-name::$GZ_TARBALL_NAME"

          yarn gulp vscode-linux-${VSCODE_ARCH}-min
          (cd .. && cp -r VSCode-linux-${VSCODE_ARCH} CodeOSS-linux-${VSCODE_ARCH})
          (cd .. && tar -cJf "$XZ_TARBALL_NAME" CodeOSS-linux-${VSCODE_ARCH})
          mv ../"$XZ_TARBALL_NAME" .
          (cd .. && tar -zcf "$GZ_TARBALL_NAME" CodeOSS-linux-${VSCODE_ARCH})
          mv ../"$GZ_TARBALL_NAME" .

          (cd .. && tar -cJf CodeOSS-linux-${VSCODE_ARCH}.tar.xz CodeOSS-linux-${VSCODE_ARCH})
          mv ../CodeOSS-linux-${VSCODE_ARCH}.tar.xz .

          yarn gulp vscode-linux-${VSCODE_ARCH}-build-rpm
          # shellcheck disable=SC2046
          # shellcheck disable=SC2012
          mv .build/linux/rpm/*/*.rpm CodeOSS-linux-${VSCODE_ARCH}.$(ls .build/linux/rpm/*/*.rpm | awk -F "." '{print $5}').rpm

          yarn gulp vscode-linux-${VSCODE_ARCH}-build-deb
          cp .build/linux/deb/*/deb/*.deb CodeOSS-linux-${VSCODE_ARCH}.deb

          # yarn gulp vscode-linux-${VSCODE_ARCH}-build-snap
        shell: bash

      - name: Build AppImage package
        if: ${{ env.VSCODE_ARCH == 'x64' }}
        run: |
          curl -fsSL https://deno.land/x/install/install.sh | sh
          DENO_INSTALL="$HOME/.deno"
          export DENO_INSTALL
          PATH="$DENO_INSTALL/bin:$PATH"
          export PATH

          echo "${SPLIT_LINE}${SPLIT_LINE}${SPLIT_LINE}${SPLIT_LINE}"
          echo "${SPLIT_LINE}${SPLIT_LINE}${SPLIT_LINE}${SPLIT_LINE}"

          deno fmt ./product.json
          deno run --allow-read --allow-net https://deno.land/std@0.104.0/http/file_server.ts >dfserv.log 2>&1 &
          sleep 20 && (netstat -tlnp | grep 4507) && cat dfserv.log

          echo "${SPLIT_LINE}${SPLIT_LINE}${SPLIT_LINE}${SPLIT_LINE}"
          echo "${SPLIT_LINE}${SPLIT_LINE}${SPLIT_LINE}${SPLIT_LINE}"

          # shellcheck disable=SC2035
          mv .build/linux/deb/*/deb/*.deb . && DOWNLOAD_URL="http://127.0.0.1:4507/$(ls *_*.deb)"
          echo "DOWNLOAD_URL >>> $DOWNLOAD_URL" && export DOWNLOAD_URL
          echo "APPLICATION_NAME >>> $APPLICATION_NAME" && export APPLICATION_NAME
          LINUX_ICON_NAME=$(node -p "require('./product.json')['linuxIconName']")
          echo "LINUX_ICON_NAME >>> $LINUX_ICON_NAME" && export LINUX_ICON_NAME

          GITHUB_API_URL=https://api.github.com/repos/AppImage/pkg2appimage/releases
          curl -H "Accept: application/vnd.github.v3+json" -s $GITHUB_API_URL >releases.json
          BROWSER_DOWNLOAD_URL=$(node -p "require('./releases.json')[0]['assets'][0]['browser_download_url']")
          curl -L -O -s "$BROWSER_DOWNLOAD_URL"

          chmod u+x ./"${BROWSER_DOWNLOAD_URL##*/}" && ./"${BROWSER_DOWNLOAD_URL##*/}" .github/CodeOSS-AppImage.yml
          mv out/*.AppImage CodeOSS-linux-${VSCODE_ARCH}.AppImage
        shell: bash

      - name: Build server packages
        run: |
          yarn gulp vscode-reh-linux-${VSCODE_ARCH}-min
          (cd .. && mv vscode-reh-linux-${VSCODE_ARCH} vscode-server-linux-${VSCODE_ARCH})
          (cd .. && tar -zcf vscode-server-linux-${VSCODE_ARCH}.tar.gz vscode-server-linux-${VSCODE_ARCH})
          mv ../vscode-server-linux-${VSCODE_ARCH}.tar.gz .

          yarn gulp vscode-reh-web-linux-${VSCODE_ARCH}-min
          (cd .. && mv vscode-reh-web-linux-${VSCODE_ARCH} vscode-server-linux-${VSCODE_ARCH}-web)
          (cd .. && tar -zcf vscode-server-linux-${VSCODE_ARCH}-web.tar.gz vscode-server-linux-${VSCODE_ARCH}-web)
          mv ../vscode-server-linux-${VSCODE_ARCH}-web.tar.gz .
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          if [ -f "$XZ_TARBALL_NAME" ]; then
          	sha512sum $XZ_TARBALL_NAME | awk '{print $1}' >$XZ_TARBALL_NAME.sha512
          fi

          if [ -f "$GZ_TARBALL_NAME" ]; then
          	sha512sum $GZ_TARBALL_NAME | awk '{print $1}' >$GZ_TARBALL_NAME.sha512
          fi

          if [ -f "vscode-server-linux-${VSCODE_ARCH}.tar.gz" ]; then
          	sha512sum vscode-server-linux-${VSCODE_ARCH}.tar.gz | awk '{print $1}' >vscode-server-linux-${VSCODE_ARCH}.tar.gz.sha512
          fi

          if [ -f "vscode-server-linux-${VSCODE_ARCH}-web.tar.gz" ]; then
          	sha512sum vscode-server-linux-${VSCODE_ARCH}-web.tar.gz | awk '{print $1}' >vscode-server-linux-${VSCODE_ARCH}-web.tar.gz.sha512
          fi

          # shellcheck disable=SC2143
          # shellcheck disable=SC2010
          if [ -n "$(ls | grep -E "CodeOSS-linux-${VSCODE_ARCH}.*\.rpm$")" ]; then
          	sha512sum CodeOSS-linux-${VSCODE_ARCH}*.rpm >tmpret
          	# shellcheck disable=SC2002
          	cat tmpret | awk '{print $1}' >"$(cat tmpret | awk '{print $2}')".sha512
          fi

          if [ -f "CodeOSS-linux-${VSCODE_ARCH}.deb" ]; then
          	sha512sum CodeOSS-linux-${VSCODE_ARCH}.deb | awk '{print $1}' >CodeOSS-linux-${VSCODE_ARCH}.deb.sha512
          fi

          if [ -f "CodeOSS-linux-${VSCODE_ARCH}.AppImage" ]; then
          	sha512sum CodeOSS-linux-${VSCODE_ARCH}.AppImage | awk '{print $1}' >CodeOSS-linux-${VSCODE_ARCH}.AppImage.sha512
          fi

          [ "${VSCODE_ARCH}" != "x64" ] && rm -f ./product.json
          if [ -f "product.json" ]; then
          	sha512sum product.json | awk '{print $1}' >product.json.sha512
          fi
        shell: bash

      - name: Publish packages
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            ${{ steps.build-binary-packages.outputs.xz-tarball-name }}
            ${{ steps.build-binary-packages.outputs.xz-tarball-name }}.sha512
            ${{ steps.build-binary-packages.outputs.gz-tarball-name }}
            ${{ steps.build-binary-packages.outputs.gz-tarball-name }}.sha512
            CodeOSS-linux-${{ env.VSCODE_ARCH }}*.rpm
            CodeOSS-linux-${{ env.VSCODE_ARCH }}*.rpm.sha512
            CodeOSS-linux-*.deb
            CodeOSS-linux-*.deb.sha512
            CodeOSS-linux-${{ env.VSCODE_ARCH }}.AppImage
            CodeOSS-linux-${{ env.VSCODE_ARCH }}.AppImage.sha512
            vscode-server-linux-${{ env.VSCODE_ARCH }}.tar.gz
            vscode-server-linux-${{ env.VSCODE_ARCH }}.tar.gz.sha512
            vscode-server-linux-${{ env.VSCODE_ARCH }}-web.tar.gz
            vscode-server-linux-${{ env.VSCODE_ARCH }}-web.tar.gz.sha512
            product.json
            product.json.sha512

  macos:
    name: macOS
    runs-on: macos-latest
    needs: generate-product-configurations
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Update product configurations
        run: echo '${{ needs.generate-product-configurations.outputs.product-json }}' >product.json
        shell: bash

      - name: Build and Package
        run: |
          npm_config_arch=${{ matrix.arch }}
          export npm_config_arch
          yarn
          yarn gulp vscode-darwin-${{ matrix.arch }}-min
          (cd .. && cp -r VSCode-darwin-${{ matrix.arch }} CodeOSS-darwin-${{ matrix.arch }})
          (cd .. && tar -cJf CodeOSS-darwin-${{ matrix.arch }}.tar.xz CodeOSS-darwin-${{ matrix.arch }})
          mv ../CodeOSS-darwin-${{ matrix.arch }}.tar.xz .

          npm i -g @ffflorian/jszip-cli@3.1.6
          (cd .. && jszip-cli add CodeOSS-darwin-${{ matrix.arch }} --output CodeOSS-darwin-${{ matrix.arch }}.zip)
          mv ../CodeOSS-darwin-${{ matrix.arch }}.zip .

          if [ "${{ matrix.arch }}" == "x64" ]; then
          	yarn gulp vscode-reh-darwin-min
          	(cd .. && mv vscode-reh-darwin vscode-server-darwin)
          	(cd .. && jszip-cli add vscode-server-darwin --output vscode-server-darwin.zip)
          	mv ../vscode-server-darwin.zip .

          	yarn gulp vscode-reh-web-darwin-min
          	(cd .. && mv vscode-reh-web-darwin vscode-server-darwin-web)
          	(cd .. && jszip-cli add vscode-server-darwin-web --output vscode-server-darwin-web.zip)
          	mv ../vscode-server-darwin-web.zip .
          fi
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          npm install -g checksum
          checksum -a sha512 CodeOSS-darwin-${{ matrix.arch }}.tar.xz | awk '{print $1}' >CodeOSS-darwin-${{ matrix.arch }}.tar.xz.sha512
          checksum -a sha512 CodeOSS-darwin-${{ matrix.arch }}.zip | awk '{print $1}' >CodeOSS-darwin-${{ matrix.arch }}.zip.sha512

          if [ -f "vscode-server-darwin.zip" ]; then
          	checksum -a sha512 vscode-server-darwin.zip | awk '{print $1}' >vscode-server-darwin.zip.sha512
          fi

          if [ -f "vscode-server-darwin-web.zip" ]; then
          	checksum -a sha512 vscode-server-darwin-web.zip | awk '{print $1}' >vscode-server-darwin-web.zip.sha512
          fi
        shell: bash

      - name: Publish packages
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            CodeOSS-darwin-${{ matrix.arch }}.tar.xz
            CodeOSS-darwin-${{ matrix.arch }}.tar.xz.sha512
            CodeOSS-darwin-${{ matrix.arch }}.zip
            CodeOSS-darwin-${{ matrix.arch }}.zip.sha512
            vscode-server-darwin.zip
            vscode-server-darwin.zip.sha512
            vscode-server-darwin-web.zip
            vscode-server-darwin-web.zip.sha512

  windows:
    name: Windows
    runs-on: windows-2019
    needs: generate-product-configurations
    strategy:
      matrix:
        arch: [x64, arm64, ia32]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Update product configurations
        run: |
          echo '${{ needs.generate-product-configurations.outputs.product-json }}' >product.json
          echo '${{ needs.generate-product-configurations.outputs.win32vem-xml }}' >resources/win32/VisualElementsManifest.xml
        shell: bash

      - name: Build binary packages
        run: |
          npm_config_arch=${{ matrix.arch }}
          export npm_config_arch
          yarn
          yarn gulp vscode-win32-${{ matrix.arch }}-min
          (cd .. && cp -r VSCode-win32-${{ matrix.arch }} CodeOSS-win32-${{ matrix.arch }})
          (cd .. && tar -cJf CodeOSS-win32-${{ matrix.arch }}.tar.xz CodeOSS-win32-${{ matrix.arch }})
          mv ../CodeOSS-win32-${{ matrix.arch }}.tar.xz .

          (cd .. && 7z a CodeOSS-win32-${{ matrix.arch }}.zip CodeOSS-win32-${{ matrix.arch }} -r -mx9)
          mv ../CodeOSS-win32-${{ matrix.arch }}.zip .
        shell: bash

      - name: Build setup installers
        run: |
          yarn gulp vscode-win32-${{ matrix.arch }}-inno-updater
          curl -L -s -o resources/win32/code.ico ${{ env.CODE_ICO_URL }}

          yarn gulp vscode-win32-${{ matrix.arch }}-user-setup
          mv .build/win32-${{ matrix.arch }}/user-setup/VSCodeSetup.exe CodeOSSUserSetup-win32-${{ matrix.arch }}.exe

          yarn gulp vscode-win32-${{ matrix.arch }}-system-setup
          mv .build/win32-${{ matrix.arch }}/system-setup/VSCodeSetup.exe CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe
        shell: bash

      - name: Build server packages
        if: ${{ matrix.arch != 'arm64' }}
        run: |
          yarn gulp vscode-reh-win32-${{ matrix.arch }}-min
          (cd .. && mv vscode-reh-win32-${{ matrix.arch }} vscode-server-win32-${{ matrix.arch }})
          (cd .. && 7z a vscode-server-win32-${{ matrix.arch }}.zip vscode-server-win32-${{ matrix.arch }} -r -mx9)
          mv ../vscode-server-win32-${{ matrix.arch }}.zip .

          yarn gulp vscode-reh-web-win32-${{ matrix.arch }}-min
          (cd .. && mv vscode-reh-web-win32-${{ matrix.arch }} vscode-server-win32-${{ matrix.arch }}-web)
          (cd .. && 7z a vscode-server-win32-${{ matrix.arch }}-web.zip vscode-server-win32-${{ matrix.arch }}-web -r -mx9)
          mv ../vscode-server-win32-${{ matrix.arch }}-web.zip .
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          sha512sum CodeOSS-win32-${{ matrix.arch }}.tar.xz | awk '{print $1}' >CodeOSS-win32-${{ matrix.arch }}.tar.xz.sha512
          sha512sum CodeOSS-win32-${{ matrix.arch }}.zip | awk '{print $1}' >CodeOSS-win32-${{ matrix.arch }}.zip.sha512
          sha512sum CodeOSSUserSetup-win32-${{ matrix.arch }}.exe | awk '{print $1}' >CodeOSSUserSetup-win32-${{ matrix.arch }}.exe.sha512
          sha512sum CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe | awk '{print $1}' >CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe.sha512
          if [ -f "vscode-server-win32-${{ matrix.arch }}.zip" ]; then
          	sha512sum vscode-server-win32-${{ matrix.arch }}.zip | awk '{print $1}' >vscode-server-win32-${{ matrix.arch }}.zip.sha512
          fi

          if [ -f "vscode-server-win32-${{ matrix.arch }}-web.zip" ]; then
          	sha512sum vscode-server-win32-${{ matrix.arch }}-web.zip | awk '{print $1}' >vscode-server-win32-${{ matrix.arch }}-web.zip.sha512
          fi
        shell: bash

      - name: Publish packages
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            CodeOSS-win32-${{ matrix.arch }}.tar.xz
            CodeOSS-win32-${{ matrix.arch }}.tar.xz.sha512
            CodeOSS-win32-${{ matrix.arch }}.zip
            CodeOSS-win32-${{ matrix.arch }}.zip.sha512
            CodeOSSUserSetup-win32-${{ matrix.arch }}.exe
            CodeOSSUserSetup-win32-${{ matrix.arch }}.exe.sha512
            CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe
            CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe.sha512
            vscode-server-win32-${{ matrix.arch }}.zip
            vscode-server-win32-${{ matrix.arch }}.zip.sha512
            vscode-server-win32-${{ matrix.arch }}-web.zip
            vscode-server-win32-${{ matrix.arch }}-web.zip.sha512
