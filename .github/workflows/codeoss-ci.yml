# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CodeOSS CI

on:
  push:
    branches:
      - dev/*
    tags:
      - v*.*.*
  pull_request:
    branches:
      - main

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_VERSION: 14
  PYTHON_VERSION: "2.x"
  SPLIT_LINE: =============================
  CODE_ICO_URL: https://raw.githubusercontent.com/LiangchengJ/vscode/94cba4eb314f52fd18b47b72459954fda65302d0/resources/win32/code.ico
  UPDATE_PRODUCT_CONFIGURATION_SH: |
    PKG_VER=$(node -p "require('./package.json')['version']")
    VS_ZIP_URL="https://update.code.visualstudio.com/${PKG_VER}/darwin-universal/stable"
    CURL_DO_URL=$(curl -is "$VS_ZIP_URL" | grep Location | awk -F ": " '{print $2}' | tr -d "\r|\n")
    echo "CURL_DO_URL >>> $CURL_DO_URL"

    VS_ZIP_FNAME=VSCode-darwin-universal.zip
    curl -L -s -o $VS_ZIP_FNAME "$CURL_DO_URL"
    npm install extract-zip@2.0.1 -g
    extract-zip $VS_ZIP_FNAME
    cp 'Visual Studio Code.app/Contents/Resources/app/product.json' ./vs-product.json
    node ./.github/updateProduct.js

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64, armhf]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update product configurations
        run: |
          ${{ env.UPDATE_PRODUCT_CONFIGURATION_SH }}
        shell: bash

      - name: Install build tools
        run: |
          sudo apt update -y
          sudo apt install -y build-essential pkg-config libx11-dev libx11-xcb-dev libxkbfile-dev libsecret-1-dev libnotify-bin
          sudo apt-get install -y fakeroot rpm
          sudo apt-get install -y snapcraft

      - name: Switch to Terrapin packages
        run: |
          set -e
          npx https://aka.ms/enablesecurefeed standAlone

      - name: Install build dependencies
        run: |
          set -e
          for i in {1..3}; do # try 3 times, for Terrapin
          	yarn --cwd build --frozen-lockfile && break
          	if [ "$i" -eq 3 ]; then
          		echo "Yarn failed too many times" >&2
          		exit 1
          	fi
          	echo "Yarn failed $i, trying again..."
          done
        shell: bash

      - name: Install dependencies
        run: |
          NPM_ARCH=${{ matrix.arch }}
          [ "${{ matrix.arch }}" == "armhf" ] && NPM_ARCH=armv7l
          echo "NPM_ARCH >>> $NPM_ARCH"
          export NPM_ARCH

          npm_config_arch=${NPM_ARCH}
          export npm_config_arch

          # if [ -z "$CC" ] || [ -z "$CXX" ]; then
          # 	# Download clang based on chromium revision used by vscode
          # 	curl -s https://raw.githubusercontent.com/chromium/chromium/91.0.4472.164/tools/clang/scripts/update.py | python - --output-dir="$PWD"/.build/CR_Clang --host-os=linux
          # 	# Download libcxx headers and objects from upstream electron releases
          # 	DEBUG=libcxx-fetcher \
          # 		VSCODE_LIBCXX_OBJECTS_DIR=$PWD/.build/libcxx-objects \
          # 		VSCODE_LIBCXX_HEADERS_DIR=$PWD/.build/libcxx_headers \
          # 		VSCODE_LIBCXXABI_HEADERS_DIR=$PWD/.build/libcxxabi_headers \
          # 		VSCODE_ARCH="${NPM_ARCH}" \
          # 		node build/linux/libcxx-fetcher.js
          # 	# Set compiler toolchain
          # 	# Flags for the client build are based on
          # 	# https://source.chromium.org/chromium/chromium/src/+/refs/tags/91.0.4472.164:build/config/arm.gni
          # 	# https://source.chromium.org/chromium/chromium/src/+/refs/tags/91.0.4472.164:build/config/compiler/BUILD.gn
          # 	# https://source.chromium.org/chromium/chromium/src/+/refs/tags/91.0.4472.164:build/config/c++/BUILD.gn
          # 	export CC=$PWD/.build/CR_Clang/bin/clang
          # 	export CXX=$PWD/.build/CR_Clang/bin/clang++
          # 	export CXXFLAGS="-nostdinc++ -D_LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS -D__NO_INLINE__ -isystem$PWD/.build/libcxx_headers/include -isystem$PWD/.build/libcxxabi_headers/include -fPIC -flto=thin -fsplit-lto-unit"
          # 	export LDFLAGS="-stdlib=libc++ -fuse-ld=lld -flto=thin -L$PWD/.build/libcxx-objects -lc++abi -Wl,--lto-O0"
          # 	VSCODE_REMOTE_CC=$(which gcc)
          # 	export VSCODE_REMOTE_CC
          # 	VSCODE_REMOTE_CXX=$(which g++)
          # 	export VSCODE_REMOTE_CXX
          # fi

          for i in {1..3}; do # try 3 times, for Terrapin
          	yarn --frozen-lockfile && break
          	if [ $i -eq 3 ]; then
          		echo "Yarn failed too many times" >&2
          		exit 1
          	fi
          	echo "Yarn failed $i, trying again..."
          done
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        shell: bash

      - name: Build binary packages
        run: |
          yarn gulp vscode-linux-${{ matrix.arch }}-min
          (cd .. && cp -r VSCode-linux-${{ matrix.arch }} CodeOSS-linux-${{ matrix.arch }})
          (cd .. && tar -cJf CodeOSS-linux-${{ matrix.arch }}.tar.xz CodeOSS-linux-${{ matrix.arch }})
          mv ../CodeOSS-linux-${{ matrix.arch }}.tar.xz .

          yarn gulp vscode-linux-${{ matrix.arch }}-build-rpm
          # shellcheck disable=SC2046
          # shellcheck disable=SC2012
          mv .build/linux/rpm/*/*.rpm CodeOSS-linux-${{ matrix.arch }}.$(ls .build/linux/rpm/*/*.rpm | awk -F "." '{print $5}').rpm

          yarn gulp vscode-linux-${{ matrix.arch }}-build-deb
          cp .build/linux/deb/*/deb/*.deb CodeOSS-linux-${{ matrix.arch }}.deb

          # yarn gulp vscode-linux-${{ matrix.arch }}-build-snap

          [ "${{ matrix.arch }}" != "x64" ] && rm -f ./product.json
        shell: bash

      - name: Build AppImage package for arch x64
        if: ${{ matrix.arch == 'x64' }}
        run: |
          curl -fsSL https://deno.land/x/install/install.sh | sh
          DENO_INSTALL="/home/$(whoami)/.deno"
          export DENO_INSTALL
          PATH="$DENO_INSTALL/bin:$PATH"
          export PATH

          echo "${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}"
          echo "${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}"

          deno fmt ./product.json
          deno run --allow-read --allow-net https://deno.land/std@0.104.0/http/file_server.ts >dfserv.log 2>&1 &
          sleep 20 && (netstat -tlnp | grep 4507) && cat dfserv.log

          echo "${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}"
          echo "${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}${{ env.SPLIT_LINE }}"

          mv .build/linux/deb/*/deb/*.deb . && DOWNLOAD_URL="http://127.0.0.1:4507/$(ls *_*.deb)"
          echo "DOWNLOAD_URL >>> $DOWNLOAD_URL" && export DOWNLOAD_URL
          APPLICATION_NAME=$(node -p "require('./product.json')['applicationName']")
          echo "APPLICATION_NAME >>> $APPLICATION_NAME" && export APPLICATION_NAME
          LINUX_ICON_NAME=$(node -p "require('./product.json')['linuxIconName']")
          echo "LINUX_ICON_NAME >>> $LINUX_ICON_NAME" && export LINUX_ICON_NAME

          URI="$(wget -q https://github.com/AppImage/pkg2appimage/releases -O - | grep "pkg2appimage-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2)"
          curl -L -O -s "https://github.com/${URI}"

          # shellcheck disable=SC2211
          chmod +x ./pkg2appimage-*.AppImage && ./pkg2appimage-*.AppImage .github/CodeOSS-AppImage.yml
          mv out/*.AppImage CodeOSS-linux-${{ matrix.arch }}.AppImage
        shell: bash

      - name: Build server packages
        run: |
          yarn gulp vscode-reh-linux-${{ matrix.arch }}-min
          (cd .. && mv vscode-reh-linux-${{ matrix.arch }} vscode-server-linux-${{ matrix.arch }})
          (cd .. && tar -zcf vscode-server-linux-${{ matrix.arch }}.tar.gz vscode-server-linux-${{ matrix.arch }})
          mv ../vscode-server-linux-${{ matrix.arch }}.tar.gz .

          yarn gulp vscode-reh-web-linux-${{ matrix.arch }}-min
          (cd .. && mv vscode-reh-web-linux-${{ matrix.arch }} vscode-server-linux-${{ matrix.arch }}-web)
          (cd .. && tar -zcf vscode-server-linux-${{ matrix.arch }}-web.tar.gz vscode-server-linux-${{ matrix.arch }}-web)
          mv ../vscode-server-linux-${{ matrix.arch }}-web.tar.gz .
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          if [ -f "CodeOSS-linux-${{ matrix.arch }}.tar.xz" ]; then
          	sha512sum CodeOSS-linux-${{ matrix.arch }}.tar.xz | awk '{print $1}' >CodeOSS-linux-${{ matrix.arch }}.tar.xz.sha512
          fi

          if [ -f "vscode-server-linux-${{ matrix.arch }}.tar.gz" ]; then
          	sha512sum vscode-server-linux-${{ matrix.arch }}.tar.gz | awk '{print $1}' >vscode-server-linux-${{ matrix.arch }}.tar.gz.sha512
          fi

          if [ -f "vscode-server-linux-${{ matrix.arch }}-web.tar.gz" ]; then
          	sha512sum vscode-server-linux-${{ matrix.arch }}-web.tar.gz | awk '{print $1}' >vscode-server-linux-${{ matrix.arch }}-web.tar.gz.sha512
          fi

          # shellcheck disable=SC2143
          # shellcheck disable=SC2010
          if [ -n "$(ls | grep -E "CodeOSS-linux-${{ matrix.arch }}.*\.rpm$")" ]; then
          	sha512sum CodeOSS-linux-${{ matrix.arch }}*.rpm >tmpret
          	# shellcheck disable=SC2002
          	cat tmpret | awk '{print $1}' >"$(cat tmpret | awk '{print $2}')".sha512
          fi

          if [ -f "CodeOSS-linux-${{ matrix.arch }}.deb" ]; then
          	sha512sum CodeOSS-linux-${{ matrix.arch }}.deb | awk '{print $1}' >CodeOSS-linux-${{ matrix.arch }}.deb.sha512
          fi

          if [ -f "CodeOSS-linux-${{ matrix.arch }}.AppImage" ]; then
          	sha512sum CodeOSS-linux-${{ matrix.arch }}.AppImage | awk '{print $1}' >CodeOSS-linux-${{ matrix.arch }}.AppImage.sha512
          fi

          if [ -f "product.json" ]; then
          	sha512sum product.json | awk '{print $1}' >product.json.sha512
          fi
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            CodeOSS-linux-${{ matrix.arch }}.tar.xz
            CodeOSS-linux-${{ matrix.arch }}.tar.xz.sha512
            CodeOSS-linux-${{ matrix.arch }}*.rpm
            CodeOSS-linux-${{ matrix.arch }}*.rpm.sha512
            CodeOSS-linux-*.deb
            CodeOSS-linux-*.deb.sha512
            CodeOSS-linux-${{ matrix.arch }}.AppImage
            CodeOSS-linux-${{ matrix.arch }}.AppImage.sha512
            vscode-server-linux-${{ matrix.arch }}.tar.gz
            vscode-server-linux-${{ matrix.arch }}.tar.gz.sha512
            vscode-server-linux-${{ matrix.arch }}-web.tar.gz
            vscode-server-linux-${{ matrix.arch }}-web.tar.gz.sha512
            product.json
            product.json.sha512

  macos:
    name: macOS
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update product configurations
        run: |
          ${{ env.UPDATE_PRODUCT_CONFIGURATION_SH }}
        shell: bash

      - name: Build and Package
        run: |
          yarn
          yarn gulp vscode-darwin-${{ matrix.arch }}-min
          ( cd .. && cp -r VSCode-darwin-${{ matrix.arch }} CodeOSS-darwin-${{ matrix.arch }} )
          ( cd .. && tar -cJf CodeOSS-darwin-${{ matrix.arch }}.tar.xz CodeOSS-darwin-${{ matrix.arch }} )
          mv ../CodeOSS-darwin-${{ matrix.arch }}.tar.xz .

          npm i -g @ffflorian/jszip-cli@3.1.6
          ( cd .. && jszip-cli add CodeOSS-darwin-${{ matrix.arch }} --output CodeOSS-darwin-${{ matrix.arch }}.zip )
          mv ../CodeOSS-darwin-${{ matrix.arch }}.zip .

          if [ "${{ matrix.arch }}" == "x64" ] ; then
              yarn gulp vscode-reh-darwin-min
              ( cd .. && mv vscode-reh-darwin vscode-server-darwin )
              ( cd .. && jszip-cli add vscode-server-darwin --output vscode-server-darwin.zip )
              mv ../vscode-server-darwin.zip .

              yarn gulp vscode-reh-web-darwin-min
              ( cd .. && mv vscode-reh-web-darwin vscode-server-darwin-web )
              ( cd .. && jszip-cli add vscode-server-darwin-web --output vscode-server-darwin-web.zip )
              mv ../vscode-server-darwin-web.zip .
          fi
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          npm install -g checksum
          checksum -a sha512 CodeOSS-darwin-${{ matrix.arch }}.tar.xz | awk '{print $1}' > CodeOSS-darwin-${{ matrix.arch }}.tar.xz.sha512
          checksum -a sha512 CodeOSS-darwin-${{ matrix.arch }}.zip | awk '{print $1}' > CodeOSS-darwin-${{ matrix.arch }}.zip.sha512

          if [ -f "vscode-server-darwin.zip" ] ; then
              checksum -a sha512 vscode-server-darwin.zip | awk '{print $1}' > vscode-server-darwin.zip.sha512
          fi

          if [ -f "vscode-server-darwin-web.zip" ] ; then
              checksum -a sha512 vscode-server-darwin-web.zip | awk '{print $1}' > vscode-server-darwin-web.zip.sha512
          fi
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            CodeOSS-darwin-${{ matrix.arch }}.tar.xz
            CodeOSS-darwin-${{ matrix.arch }}.tar.xz.sha512
            CodeOSS-darwin-${{ matrix.arch }}.zip
            CodeOSS-darwin-${{ matrix.arch }}.zip.sha512
            vscode-server-darwin.zip
            vscode-server-darwin.zip.sha512
            vscode-server-darwin-web.zip
            vscode-server-darwin-web.zip.sha512

  build-binary-packages-for-windows:
    name: Build binary packages for Windows
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [x64, arm64, ia32]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Update product configurations
        run: |
          ${{ env.UPDATE_PRODUCT_CONFIGURATION_SH }}
          node ./.github/updateWin32VisualElementsManifest.js
        shell: bash

      - name: Build binary packages
        run: |
          export npm_config_arch=${{ matrix.arch }}
          yarn
          yarn gulp vscode-win32-${{ matrix.arch }}-min
          ( cd .. && cp -r VSCode-win32-${{ matrix.arch }} CodeOSS-win32-${{ matrix.arch }} )
          ( cd .. && tar -cJf CodeOSS-win32-${{ matrix.arch }}.tar.xz CodeOSS-win32-${{ matrix.arch }} )
          mv ../CodeOSS-win32-${{ matrix.arch }}.tar.xz .

          ( cd .. && 7z a CodeOSS-win32-${{ matrix.arch }}.zip CodeOSS-win32-${{ matrix.arch }} -r -mx9 )
          mv ../CodeOSS-win32-${{ matrix.arch }}.zip .
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          sha512sum CodeOSS-win32-${{ matrix.arch }}.tar.xz | awk '{print $1}' > CodeOSS-win32-${{ matrix.arch }}.tar.xz.sha512
          sha512sum CodeOSS-win32-${{ matrix.arch }}.zip | awk '{print $1}' > CodeOSS-win32-${{ matrix.arch }}.zip.sha512
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            CodeOSS-win32-${{ matrix.arch }}.tar.xz
            CodeOSS-win32-${{ matrix.arch }}.tar.xz.sha512
            CodeOSS-win32-${{ matrix.arch }}.zip
            CodeOSS-win32-${{ matrix.arch }}.zip.sha512

  build-user-installer-for-windows:
    name: Build user installer for Windows
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [x64, arm64, ia32]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Update product configurations
        run: |
          ${{ env.UPDATE_PRODUCT_CONFIGURATION_SH }}
          node ./.github/updateWin32VisualElementsManifest.js
        shell: bash

      - name: Build user installer
        run: |
          export npm_config_arch=${{ matrix.arch }}
          yarn
          yarn gulp vscode-win32-${{ matrix.arch }}-min

          yarn gulp vscode-win32-${{ matrix.arch }}-inno-updater
          curl -L -s -o resources/win32/code.ico ${{ env.CODE_ICO_URL }}

          yarn gulp vscode-win32-${{ matrix.arch }}-user-setup
          mv .build/win32-${{ matrix.arch }}/user-setup/VSCodeSetup.exe CodeOSSUserSetup-win32-${{ matrix.arch }}.exe
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          sha512sum CodeOSSUserSetup-win32-${{ matrix.arch }}.exe | awk '{print $1}' > CodeOSSUserSetup-win32-${{ matrix.arch }}.exe.sha512
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            CodeOSSUserSetup-win32-${{ matrix.arch }}.exe
            CodeOSSUserSetup-win32-${{ matrix.arch }}.exe.sha512

  build-system-installer-for-windows:
    name: Build system installer for Windows
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [x64, arm64, ia32]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Update product configurations
        run: |
          ${{ env.UPDATE_PRODUCT_CONFIGURATION_SH }}
          node ./.github/updateWin32VisualElementsManifest.js
        shell: bash

      - name: Build system installer
        run: |
          export npm_config_arch=${{ matrix.arch }}
          yarn
          yarn gulp vscode-win32-${{ matrix.arch }}-min

          yarn gulp vscode-win32-${{ matrix.arch }}-inno-updater
          curl -L -s -o resources/win32/code.ico ${{ env.CODE_ICO_URL }}

          yarn gulp vscode-win32-${{ matrix.arch }}-system-setup
          mv .build/win32-${{ matrix.arch }}/system-setup/VSCodeSetup.exe CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          sha512sum CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe | awk '{print $1}' > CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe.sha512
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe
            CodeOSSSystemSetup-win32-${{ matrix.arch }}.exe.sha512

  build-vscode-server-packages-for-windows:
    name: Build vscode server packages for Windows
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [x64, arm64, ia32]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Update product configurations
        run: |
          ${{ env.UPDATE_PRODUCT_CONFIGURATION_SH }}
          node ./.github/updateWin32VisualElementsManifest.js
        shell: bash

      - name: Build vscode server packages
        run: |
          export npm_config_arch=${{ matrix.arch }}
          yarn
          if [ "${{ matrix.arch }}" != "arm64" ] ; then
              yarn gulp vscode-reh-win32-${{ matrix.arch }}-min
              ( cd .. && mv vscode-reh-win32-${{ matrix.arch }} vscode-server-win32-${{ matrix.arch }} )
              ( cd .. && 7z a vscode-server-win32-${{ matrix.arch }}.zip vscode-server-win32-${{ matrix.arch }} -r -mx9 )
              mv ../vscode-server-win32-${{ matrix.arch }}.zip .
          fi
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          if [ -f "vscode-server-win32-${{ matrix.arch }}.zip" ] ; then
              sha512sum vscode-server-win32-${{ matrix.arch }}.zip | awk '{print $1}' > vscode-server-win32-${{ matrix.arch }}.zip.sha512
          fi
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            vscode-server-win32-${{ matrix.arch }}.zip
            vscode-server-win32-${{ matrix.arch }}.zip.sha512

  build-vscode-server-web-packages-for-windows:
    name: Build vscode server web packages for Windows
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [x64, arm64, ia32]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Update product configurations
        run: |
          ${{ env.UPDATE_PRODUCT_CONFIGURATION_SH }}
          node ./.github/updateWin32VisualElementsManifest.js
        shell: bash

      - name: Build vscode server web packages
        run: |
          export npm_config_arch=${{ matrix.arch }}
          yarn
          if [ "${{ matrix.arch }}" != "arm64" ] ; then
              yarn gulp vscode-reh-web-win32-${{ matrix.arch }}-min
              ( cd .. && mv vscode-reh-web-win32-${{ matrix.arch }} vscode-server-win32-${{ matrix.arch }}-web )
              ( cd .. && 7z a vscode-server-win32-${{ matrix.arch }}-web.zip vscode-server-win32-${{ matrix.arch }}-web -r -mx9 )
              mv ../vscode-server-win32-${{ matrix.arch }}-web.zip .
          fi
        shell: bash

      - name: Generate SHA512 checksum files
        run: |
          if [ -f "vscode-server-win32-${{ matrix.arch }}-web.zip" ] ; then
              sha512sum vscode-server-win32-${{ matrix.arch }}-web.zip | awk '{print $1}' > vscode-server-win32-${{ matrix.arch }}-web.zip.sha512
          fi
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: dev_test_codeoss_ci
          tag_name: dev_test_codeoss_ci
          prerelease: true
          files: |
            vscode-server-win32-${{ matrix.arch }}-web.zip
            vscode-server-win32-${{ matrix.arch }}-web.zip.sha512
